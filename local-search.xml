<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>idea在archlinux下无法使用fctitx5</title>
    <link href="/2024/03/18/idea%E5%9C%A8archlinux%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fctitx5/"/>
    <url>/2024/03/18/idea%E5%9C%A8archlinux%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fctitx5/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用了三个多月archlinux了，记录一下踩坑点。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="查论坛帖子"><a href="#查论坛帖子" class="headerlink" title="查论坛帖子"></a>查论坛帖子</h2><p><a href="https://bbs.archlinuxcn.org/viewtopic.php?id=12645">参考帖子合集</a></p><h2 id="看相关日志"><a href="#看相关日志" class="headerlink" title="看相关日志"></a>看相关日志</h2><p><code>fcitx-diagnose</code></p><h2 id="在idea论坛提question，也可以去arch-linux论坛提问"><a href="#在idea论坛提question，也可以去arch-linux论坛提问" class="headerlink" title="在idea论坛提question，也可以去arch linux论坛提问"></a>在idea论坛提question，也可以去arch linux论坛提问</h2><h2 id="解决方法总结"><a href="#解决方法总结" class="headerlink" title="解决方法总结"></a>解决方法总结</h2><h3 id="网上方法"><a href="#网上方法" class="headerlink" title="网上方法"></a>网上方法</h3><ol><li>确保包安装全面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S fcitx5 fcitx5-im fcitx5-qt fcitx5-gtk fcitx5-chinese-addons fcitx5-configtool fcitx5-rime <br></code></pre></td></tr></table></figure><ol start="2"><li>更改idea.sh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">---------------------------------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Run the IDE.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">---------------------------------------------------------------------</span><br><br>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XIM=fcitx<br>export XIM_PROGRAM=fcitx<br>export XMODIFIERS=&quot;@im=fcitx&quot;<br>export SDL_IM_MODULE=fcitx<br>export LC_CTYPE=zh_CN.UTF-8<br></code></pre></td></tr></table></figure><ol start="3"><li>更换jre</li></ol><p>（但是据说这个bug已经修复了）</p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/image-20240318161546085.png" alt="image-20240318161546085"></p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/image-20240318161624550.png" alt="image-20240318161624550"></p><ol start="4"><li>查看环境变量</li></ol><p>路径：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo Vim /etc/environment<br></code></pre></td></tr></table></figure><p>wayland 环境下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XMODIFIERS=@im=fcitx<br></code></pre></td></tr></table></figure><p>x11 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br>GLFW_IM_MODULE=ibus<br><br></code></pre></td></tr></table></figure><h3 id="我的解决方法"><a href="#我的解决方法" class="headerlink" title="我的解决方法"></a>我的解决方法</h3><ol start="5"><li>最关键的一点：不要导入Windows端idea的配置文件，可以使用网络同步（因为网络同步是不全面的，狗头保命），但千万不要导入本地保存的配置文件</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>追番最优解autobangumi踩坑实录--vmware中用archlinux采用docker部署</title>
    <link href="/2024/02/07/%E8%BF%BD%E7%95%AA%E6%9C%80%E4%BC%98%E8%A7%A3autobangumi%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95-vmware%E4%B8%AD%E7%94%A8archlinux%E9%87%87%E7%94%A8docker%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/02/07/%E8%BF%BD%E7%95%AA%E6%9C%80%E4%BC%98%E8%A7%A3autobangumi%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95-vmware%E4%B8%AD%E7%94%A8archlinux%E9%87%87%E7%94%A8docker%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h1><p>在没有b的情况下看番都不够优雅，看相关在线网站画质不行，且不能选自己想要的字幕组</p><p>使用相关网站下载，需要自己重命名，看的多了还要自己归档，每周一次打开网站下载，又太麻烦。</p><p>综上autobangumi就是完美的方案，订阅后，季初选择想看的番，每周自动下载，文件自动归档与重命名</p><p>成果展示<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//11.png"><br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//22.png"></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><a href="https://www.autobangumi.org/">AutoBangumi | 自动追番，解放双手！</a></p><p><a href="https://www.himiku.com/archives/auto-bangumi.html">私人博客</a></p><h1 id="踩坑实录"><a href="#踩坑实录" class="headerlink" title="踩坑实录"></a>踩坑实录</h1><h2 id="不要用wsl，与docker-desktop（会变得不幸）"><a href="#不要用wsl，与docker-desktop（会变得不幸）" class="headerlink" title="不要用wsl，与docker desktop（会变得不幸）"></a>不要用wsl，与docker desktop（会变得不幸）</h2><ol><li>内存占用特别离谱，开完就跑了个qbitorrent与AutoBangumi以及watchover，电脑内存就不够用了，要无感使用不够优雅，要优雅可以或许可以使用Windows的定时任务，使其在深夜自动运行，但是AutoBangumi必须在qbitorrent启动后启动，或许可以使用linux定时任务（但在ws中l这个该怎么弄？）</li><li>wsl内存不会自动释放，当你运行一段时间后（溢出后），会出现资源不可用的提示（这个问题在网上看了一眼好像从21年就有，或许有解决方案，没细看，因为不用的主要原因不是这个）</li><li>linux containers在bridge下，桥接的是宿主机的网络，所以不能ping通容器的ip。</li><li>如官方使用bridge，当你下载器的地址填docker网关时，AutoBangumi能连qbitorrent，但是其访问下载器ui超时。</li><li>如果填宿主机ip，会显示拒绝连接，图省事，反正就自己主机跑你可以如下设置<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//e815bd04ee994eef9002136c18be480f.png" alt="在这里插入图片描述"></li></ol><h2 id="使用VMware并运行archlinux，与电脑共享下载动漫的文件夹"><a href="#使用VMware并运行archlinux，与电脑共享下载动漫的文件夹" class="headerlink" title="使用VMware并运行archlinux，与电脑共享下载动漫的文件夹"></a>使用VMware并运行archlinux，与电脑共享下载动漫的文件夹</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p><a href="https://arch.icekylin.online/">archlinux 简明指南 | archlinux 简明指南 (icekylin.online)</a></p><p><a href="https://juejin.cn/post/7092761463567155213">在 VMware 中安装 ArchLinux - 掘金 (juejin.cn)</a></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>1.推荐安装过程中给最少2G内存，安装后1G即可，25G硬盘，cpu给满</p><p>2.使用open-vm-tools，而不是官方的vm-tools</p><p>卸载vm-tools：vmware-uninstall-tools.pl</p><p>参考： <a href="https://wiki.archlinux.org/title/VMware/Install_Arch_Linux_as_a_guest">Arch Linux - ArchWiki</a></p><p><a href="https://www.wnark.com/archives/162.html">Arch Linux安装VMware Tools教程 - 方舟基地 (wnark.com)</a></p><p>3.如果archlinux 汉化不完全，且一切设置如教程，删除<code>~/.config/plasma-localerc</code>文件重启</p><p>源自：<a href="https://bbs.archlinuxcn.org/viewtopic.php?id=12179">archlinux 汉化</a></p><p>4.共享的文件夹需要挂载，</p><p>命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other`</span><br><br># <span class="hljs-string">`mount：这是Unix/Linux系统中用于挂载文件系统的命令。`</span><br><br># <span class="hljs-string">`-t fuse.vmhgfs-fuse：这指定了要挂载的文件系统类型。在这种情况下，它使用了用于VMware共享文件夹的FUSE实现。`</span><br><br># <span class="hljs-string">`.host:/：这是VMware环境中共享文件夹的位置。`</span><br><br># <span class="hljs-string">`/mnt/hgfs：这是挂载点，也就是本地系统上共享文件夹内容在挂载后可以访问的目录。`</span><br><br># <span class="hljs-string">`-o allow_other：此选项允许除了挂载它的用户之外的其他用户访问已挂载的文件系统。`</span><br></code></pre></td></tr></table></figure><p>源自：<a href="https://zhuanlan.zhihu.com/p/650638983">VMware共享文件夹</a></p><p>注意给这个文件夹写权限</p><p>重启需要重新挂载,所以可以<code>sudo vim/etc/fstab</code>在最后加一行<code>.host:/ /mnt/hgfs fuse.vmhgfs-fuse defaults,allow_other 0 0</code></p><!-- more -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>容器的基本实现_Spring 源码阅读</title>
    <link href="/2023/03/10/Spring%20%E7%9A%84%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90_Spring%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2023/03/10/Spring%20%E7%9A%84%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90_Spring%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="容器的基本实现-Spring-源码阅读"><a href="#容器的基本实现-Spring-源码阅读" class="headerlink" title="容器的基本实现_Spring 源码阅读"></a>容器的基本实现_Spring 源码阅读</h1><h2 id="第一行代码-资源加载相关"><a href="#第一行代码-资源加载相关" class="headerlink" title="第一行代码_资源加载相关"></a>第一行代码_资源加载相关</h2><p>从此行读源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>))<br></code></pre></td></tr></table></figure><p>ps: XmlBeanFactory 已经被弃用， 但思路一样，重点是loadBeanDifinitions。</p><p>替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="一-返回-ClassPathResource"><a href="#一-返回-ClassPathResource" class="headerlink" title="一 . 返回 ClassPathResource"></a>一 . 返回 ClassPathResource</h2><h3 id="Resource-概览"><a href="#Resource-概览" class="headerlink" title="Resource 概览"></a>Resource 概览</h3><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/YzUmI.png" alt="YzUmI.png" style="zoom: 30%;" />  <p>相关实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-meta">@see</span> WritableResource<br>* <span class="hljs-meta">@see</span> ContextResource<br>* <span class="hljs-meta">@see</span> UrlResource<br>* <span class="hljs-meta">@see</span> FileUrlResource<br>* <span class="hljs-meta">@see</span> FileSystemResource<br>* <span class="hljs-meta">@see</span> ClassPathResource<br>* <span class="hljs-meta">@see</span> ByteArrayResource<br>* <span class="hljs-meta">@see</span> InputStreamResource<br></code></pre></td></tr></table></figure><p>为什么需要抽象 Resource，不用 Url ？</p><ol><li>Url 注册 handle 读取资源，但是没有 ClassPath 等资源的 handle，虽然可以自己注册 handle，但是不利于使用者代码编写（需要熟悉 Url 实现机制）。</li><li>没有相关方法</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="1-ClassPathResource"><a href="#1-ClassPathResource" class="headerlink" title="1.ClassPathResource"></a>1.ClassPathResource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathResource</span><span class="hljs-params">(String path)</span> &#123;<br><span class="hljs-built_in">this</span>(path, (ClassLoader) <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathResource</span><span class="hljs-params">(String path, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>   Assert.notNull(path, <span class="hljs-string">&quot;Path must not be null&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">pathToUse</span> <span class="hljs-operator">=</span> StringUtils.cleanPath(path); <span class="hljs-comment">// 详见2</span><br>   <span class="hljs-keyword">if</span> (pathToUse.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      pathToUse = pathToUse.substring(<span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-built_in">this</span>.path = pathToUse;<br>   <span class="hljs-built_in">this</span>.absolutePath = pathToUse;<br>   <span class="hljs-built_in">this</span>.classLoader = (classLoader != <span class="hljs-literal">null</span> ? classLoader : ClassUtils.getDefaultClassLoader());<br>   <span class="hljs-built_in">this</span>.clazz = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-cleanPath"><a href="#2-cleanPath" class="headerlink" title="2.cleanPath"></a>2.cleanPath</h4><p>主要的目的是消除冗余的路径信息，获得绝对路径。</p><p>总结：</p><ol><li>将Windows路径中的反斜杠<code>\</code>替换为正斜杠<code>/</code>。</li><li>处理路径中的重复斜杠，将它们替换为单个斜杠。</li><li>处理路径中的<code>&quot;.&quot;</code>，将它们去掉。</li><li>处理路径中的<code>&quot;..&quot;</code>，将它们和它前面的路径部分都去掉。</li></ol><p>例如：</p><ul><li><code>/foo/bar/../baz</code> 会被规范化为 <code>/foo/baz</code></li><li><code>/foo/./bar/baz</code> 会被规范化为 <code>/foo/bar/baz</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">cleanPath</span><span class="hljs-params">(String path)</span> &#123;<br>    <br>   <span class="hljs-keyword">if</span> (!hasLength(path)) &#123;<span class="hljs-comment">//判空 详见3</span><br>      <span class="hljs-keyword">return</span> path;<br>   &#125;<br>  <span class="hljs-comment">// 将路径中的&quot;\\&quot; (即WINDOWS_FOLDER_SEPARATOR) 换为 &quot;/&quot; (即FOLDER_SEPARATOR), 例如&quot;C:\\ClassPathResourceTests.java&quot;   详见4</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">normalizedPath</span> <span class="hljs-operator">=</span> replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">pathToUse</span> <span class="hljs-operator">=</span> normalizedPath;<br><br>   <span class="hljs-comment">// Shortcut if there is no work to do</span><br>   <span class="hljs-keyword">if</span> (pathToUse.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> pathToUse;<br>   &#125;<br><br>   <span class="hljs-comment">// Strip prefix from path to analyze, to not treat it as part of the</span><br>   <span class="hljs-comment">// first path element. This is necessary to correctly parse paths like</span><br>   <span class="hljs-comment">// &quot;file:core/../core/io/Resource.class&quot;, where the &quot;..&quot; should just</span><br>   <span class="hljs-comment">// strip the first &quot;core&quot; directory while keeping the &quot;file:&quot; prefix.</span><br>    <span class="hljs-comment">//字符串分为前缀和内容</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">prefixIndex</span> <span class="hljs-operator">=</span> pathToUse.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">if</span> (prefixIndex != -<span class="hljs-number">1</span>) &#123;<br>      prefix = pathToUse.substring(<span class="hljs-number">0</span>, prefixIndex + <span class="hljs-number">1</span>);<br>       <span class="hljs-comment">//这是因为在后面的处理过程中，如果前缀不为空，会在处理过程中加上一个路径分隔符 FOLDER_SEPARATOR，从而使得最终结果的前缀和传入的前缀不一致。因此需要在处理之前将前缀置空，以避免这个问题。</span><br>      <span class="hljs-keyword">if</span> (prefix.contains(FOLDER_SEPARATOR)) &#123;<br>         prefix = <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>         pathToUse = pathToUse.substring(prefixIndex + <span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (pathToUse.startsWith(FOLDER_SEPARATOR)) &#123;<br>      prefix = prefix + FOLDER_SEPARATOR;<br>      pathToUse = pathToUse.substring(<span class="hljs-number">1</span>);<br>   &#125;<br> <span class="hljs-comment">//一个字符串转数组的工具方法, 详细 待续，此处以 &quot;/&quot; 为分隔符</span><br>   String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);<br>   <span class="hljs-comment">// we never require more elements than pathArray and in the common case the same number</span><br>   Deque&lt;String&gt; pathElements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(pathArray.length);<br>    <span class="hljs-comment">// &quot;..&quot; 的数量</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">tops</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pathArray.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> pathArray[i];<br>       <span class="hljs-comment">// CURRENT_PATH == &quot;.&quot;</span><br>      <span class="hljs-keyword">if</span> (CURRENT_PATH.equals(element)) &#123;<br>         <span class="hljs-comment">// Points to current directory - drop it.</span><br>      &#125;<br>       <span class="hljs-comment">//&quot;..&quot; == TOP_PATH</span><br>       <span class="hljs-comment">//..表示返回上一级路径</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TOP_PATH.equals(element)) &#123;<br>         <span class="hljs-comment">// Registering top path found.</span><br>         tops++;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">if</span> (tops &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Merging path element with element corresponding to top path.</span><br>            tops--;<br>         &#125;<br>         <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Normal path element found.</span><br>            pathElements.addFirst(element);<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// All path elements stayed the same - shortcut</span><br>   <span class="hljs-keyword">if</span> (pathArray.length == pathElements.size()) &#123;<br>      <span class="hljs-keyword">return</span> normalizedPath;<br>   &#125;<br>   <span class="hljs-comment">// Remaining top paths need to be retained.</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tops; i++) &#123;<br>      pathElements.addFirst(TOP_PATH);<br>   &#125;<br>   <span class="hljs-comment">// If nothing else left, at least explicitly point to current path.</span><br>    <br>    <span class="hljs-comment">// 判断是否是根路径</span><br>   <span class="hljs-keyword">if</span> (pathElements.size() == <span class="hljs-number">1</span> &amp;&amp; pathElements.getLast().isEmpty() &amp;&amp; !prefix.endsWith(FOLDER_SEPARATOR)) &#123;<br>      pathElements.addFirst(CURRENT_PATH);<br>   &#125;<br><span class="hljs-comment">//用 &quot;/&quot; 连接pathElements元素</span><br>   <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">joined</span> <span class="hljs-operator">=</span> collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);<br>   <span class="hljs-comment">// avoid string concatenation with empty prefix</span><br>   <span class="hljs-keyword">return</span> prefix.isEmpty() ? joined : prefix + joined;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-hasLength"><a href="#3-hasLength" class="headerlink" title="3.hasLength"></a>3.hasLength</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasLength</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String str)</span> &#123;<br><span class="hljs-keyword">return</span> (str != <span class="hljs-literal">null</span> &amp;&amp; !str.isEmpty());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用 newPatten 替换 inString 中所有 oldPattern</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">replace</span><span class="hljs-params">(String inString, String oldPattern, <span class="hljs-meta">@Nullable</span> String newPattern)</span> &#123;<br>   <span class="hljs-keyword">if</span> (!hasLength(inString) || !hasLength(oldPattern) || newPattern == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> inString;<br>   &#125;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> inString.indexOf(oldPattern);<br>   <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// no occurrence -&gt; can return input as-is</span><br>      <span class="hljs-keyword">return</span> inString;<br>   &#125;<br><span class="hljs-comment">// 扩大了就提前预留空间</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> inString.length();<br>   <span class="hljs-keyword">if</span> (newPattern.length() &gt; oldPattern.length()) &#123;<br>      capacity += <span class="hljs-number">16</span>;<br>   &#125;<br>   <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(capacity);<br><br>   <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// our position in the old string</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">patLen</span> <span class="hljs-operator">=</span> oldPattern.length();<br>   <span class="hljs-keyword">while</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>      sb.append(inString, pos, index);<br>      sb.append(newPattern);<br>      pos = index + patLen;<br>      index = inString.indexOf(oldPattern, pos);<br>   &#125;<br><br>   <span class="hljs-comment">// append any characters to the right of a match</span><br>   sb.append(inString, pos, inString.length());<br>   <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-返回-XmlBeanFactory"><a href="#二-返回-XmlBeanFactory" class="headerlink" title="二. 返回 XmlBeanFactory"></a>二. 返回 XmlBeanFactory</h2><p>ps: 此类已经被弃用</p><p>此过程重点注意 loadBeandefinitions 方法即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Spring 源码深度解析</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring 源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建_Spring 源码阅读</title>
    <link href="/2023/03/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Spring-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2023/03/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Spring-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="环境搭建-Spring-源码阅读"><a href="#环境搭建-Spring-源码阅读" class="headerlink" title="环境搭建_Spring 源码阅读"></a>环境搭建_Spring 源码阅读</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><a href="https://github.com/spring-projects/spring-framework/wiki/Build-from-Source">Build from Source · spring-projects&#x2F;spring-framework Wiki (github.com)</a></p><p><strong>注意JDK 需要17</strong></p><p>Gradle编译：无效的源发行版: 17<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//2.png"></p><h2 id="第一步-pull"><a href="#第一步-pull" class="headerlink" title="第一步 pull"></a>第一步 pull</h2><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YWrel.png" alt="1"></p><p>左上角切到5.0.x，然后 git pull</p><p><a href="https://imgtg.com/image/YWAGg"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YWAGg.png" alt="YWAGg.png"></a></p><p>gradle 会自动下载。</p><h2 id="objenesis-的编译解决"><a href="#objenesis-的编译解决" class="headerlink" title="objenesis 的编译解决"></a>objenesis 的编译解决</h2><p><a href="https://imgtg.com/image/YxjiX"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YxjiX.png" alt="YxjiX.png"></a></p><p><a href="https://blog.csdn.net/feng_23479046/article/details/100186099">解决spring源码构建时缺失spring-cglib-repack和spring-objenesis-repack问题_南笙北默的博客-CSDN博客</a></p><h2 id="aspect-编译解决"><a href="#aspect-编译解决" class="headerlink" title="aspect 编译解决"></a>aspect 编译解决</h2><p><a href="https://imgtg.com/image/Yx66x"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//Yx66x.png" alt="Yx66x.png"></a></p><p><a href="https://imgtg.com/image/YxIYU"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YxIYU.png" alt="YxIYU.png"></a></p><p>使用这个插件–AspectJ</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/qq_35443962/article/details/121687219">Gradle编译：无效的源发行版: 17-已解决_帅有何用的博客-CSDN博客</a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>Spring 源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 并发笔记</title>
    <link href="/2023/02/27/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/27/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="Java-并发笔记"><a href="#Java-并发笔记" class="headerlink" title="Java 并发笔记"></a>Java 并发笔记</h1><p>封面来源：<a href="https://whvn.cc/y8622k">https://whvn.cc/y8622k</a></p><h2 id="学习资源："><a href="#学习资源：" class="headerlink" title="学习资源："></a>学习资源：</h2><p>深入理解 Java 虚拟机 第三版</p><p> <a href="https://www.bilibili.com/video/BV16J411h7Rd/?p=24&share_source=copy_web&vd_source=e363b63499e2ebe71cceb72bdebb245d">黑马程序员深入学习Java并发编程，JUC并发编程全套教程</a></p><p><a href="https://github.com/Seazean/JavaNote/blob/main/Prog.md">JavaNote&#x2F;Prog.md at main · Seazean&#x2F;JavaNote (github.com)</a></p><p><a href="https://blog.csdn.net/weixin_44844089/article/details/115875109">java面试题：java中断，synchronized和ReentrantLock能否中断_我是方小磊的博客-CSDN博客</a></p><p>ps: 本文章只是上文相关节选，用作 Javaguide 等八股内容外的补充</p><p>系统学习请直接参考以上学习资料或者学习完 Javaguide 等八股内容再看本节选。</p><h2 id="杂记-对应视频-1p-77p"><a href="#杂记-对应视频-1p-77p" class="headerlink" title="杂记 (对应视频 1p-77p)"></a>杂记 (对应视频 1p-77p)</h2><h3 id="说说线程的生命周期和状态"><a href="#说说线程的生命周期和状态" class="headerlink" title="说说线程的生命周期和状态?"></a>说说线程的生命周期和状态?</h3><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：</p><ul><li>NEW: 初始状态，线程被创建出来但没有被调用 <code>start()</code> 。</li><li>RUNNABLE: 运行状态，线程被调用了 <code>start()</code>等待运行的状态。</li><li>BLOCKED ：阻塞状态，需要等待锁释放。</li><li>WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。</li><li>TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。</li><li>TERMINATED：终止状态，表示该线程已经运行完毕。</li></ul><h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><h4 id="通过继承-Thread-类"><a href="#通过继承-Thread-类" class="headerlink" title="通过继承 Thread 类"></a>通过继承 Thread 类</h4><h4 id="实现-Runnable-接口来创建线程"><a href="#实现-Runnable-接口来创建线程" class="headerlink" title="实现 Runnable 接口来创建线程"></a>实现 Runnable 接口来创建线程</h4><h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTaskExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>        Callable&lt;String&gt; callable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, FutureTask!&quot;</span>;<br>            &#125;<br>        &#125;;<br><br>        FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(callable);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask);<br>        thread.start();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> futureTask.get();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两种方式都可以用来创建线程，但是一般情况下推荐使用实现 Runnable 接口的方式来创建线程，原因如下：</p><ol><li>代码复用性更好。使用实现 Runnable 接口的方式，可以将线程的任务和线程本身分离开来，这样可以使得代码更加清晰和易于维护。</li><li>避免单继承的限制。Java 中的类只能继承一个父类，因此如果使用继承 Thread 类的方式来创建线程，就无法继承其他的类了，而使用实现 Runnable 接口的方式则可以避免这个问题。</li><li>支持线程池。使用实现 Runnable 接口的方式可以更好地支持线程池，因为线程池需要的是一个实现了 Runnable 接口的任务。</li></ol><h3 id="线程上下文切换的时间"><a href="#线程上下文切换的时间" class="headerlink" title="线程上下文切换的时间"></a>线程上下文切换的时间</h3><ol><li>垃圾回收</li><li>cpu 时间片用完</li><li>有更高级的线程需要运行</li><li>线程自己调用了 lock，wait，sleep，synchronized 等方法</li></ol><h3 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h3><p>只是一个提示，繁忙的时候，调度器会让优先级高的，获得更多时间片，但是cpu闲时，任务优先级没有作用</p><h3 id="isInterrupt"><a href="#isInterrupt" class="headerlink" title="isInterrupt"></a>isInterrupt</h3><p>join：等待线程运行结束</p><ol><li>join，wait，sleep，打断标记为 false，抛出异常</li><li>根据打断标记判断是否继续运行</li><li>打断正常运行的程序，不会干扰正常运行，只是有打断标记</li></ol><p><img src="C:\Users\e\AppData\Roaming\Typora\typora-user-images\image-20230227154427692.png" alt="image-20230227154427692"></p><h4 id="线程终止正确的方式—-两阶段终止"><a href="#线程终止正确的方式—-两阶段终止" class="headerlink" title="线程终止正确的方式—-两阶段终止"></a>线程终止正确的方式—-两阶段终止</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerConsumer</span>&#123;<br>    Thread monitor;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;   <br>        monitor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                <span class="hljs-keyword">if</span> (now.isInterrupted()) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    now.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span>(InterruptedException e) &#123;<br>                    stop();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        monitor.interrupt();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>主线程结束，守护线程无论如何都会结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;);<br>t.setDaemon(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 将线程设置为守护线程</span><br>t.start();<br></code></pre></td></tr></table></figure><p>通常，守护线程被用于执行一些后台任务，例如JVM的垃圾回收线程、定时任务线程等。它们并不需要与用户交互，而且在程序退出时也不需要执行清理工作，因此设置为守护线程可以避免无谓的等待和资源浪费。</p><h2 id="synchronized-锁机制"><a href="#synchronized-锁机制" class="headerlink" title="synchronized 锁机制"></a>synchronized 锁机制</h2><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p><img src="C:\Users\e\AppData\Roaming\Typora\typora-user-images\image-20230227195506766.png" alt="image-20230227195506766"></p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>owner: 拥有 Monitor 的线程，可以执行 Monitor 所保护的临界区代码。</li><li>entryList: Monitor 的入口队列，用于存放请求锁的线程。</li><li>waitSet: 等待队列，用于存放因调用 wait() 方法而被阻塞的线程。</li><li>signal 相关的组件: 用于实现线程间的协作，包括 notify() 方法、notifyAll() 方法和 wait() 方法等。其中 notify() 方法和 notifyAll() 方法用于唤醒 waitSet 中的线程，而 wait() 方法则会将当前线程加入到 waitSet 中。</li></ul><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><ul><li><p>创建锁记录（Lock Record）对象，每个线程的<strong>栈帧</strong>都会包含一个锁记录的结构，存储锁定对象的 Mark Word</p><p><a href="https://camo.githubusercontent.com/d32dcadf857b20fd4cc8aa82f09ad88c48630bcec25d96f9819c952f27e7d0c7/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836312e706e67"><img src="https://camo.githubusercontent.com/d32dcadf857b20fd4cc8aa82f09ad88c48630bcec25d96f9819c952f27e7d0c7/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836312e706e67" alt="img"></a></p></li><li><p>让锁记录中 Object reference 指向锁住的对象，并尝试用 CAS 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</p></li><li><p>如果 CAS 替换成功，对象头中存储了锁记录地址和状态 00（轻量级锁） ，表示由该线程给对象加锁 <a href="https://camo.githubusercontent.com/c79e1937fa12b82f223fa25b1b24ec78135834481f697f3f4f40d0745208970e/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836322e706e67"><img src="https://camo.githubusercontent.com/c79e1937fa12b82f223fa25b1b24ec78135834481f697f3f4f40d0745208970e/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836322e706e67" alt="img"></a></p></li><li><p>如果 CAS 失败，有两种情况：</p><ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li><li>如果是线程自己执行了 synchronized 锁重入，就添加一条 Lock Record 作为重入的计数</li></ul><p><a href="https://camo.githubusercontent.com/a7ff5c04035e8bdeea88a832b354e6f4921d319dc8f32973cdc9596f5a596054/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836332e706e67"><img src="https://camo.githubusercontent.com/a7ff5c04035e8bdeea88a832b354e6f4921d319dc8f32973cdc9596f5a596054/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254538254244254242254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836332e706e67" alt="img"></a></p></li><li><p>当退出 synchronized 代码块（解锁时）</p><ul><li><p>如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减 1</p></li><li><p>如果锁记录的值不为 null，这时使用 CAS</p><p>将 Mark Word 的值恢复给对象头</p><ul><li>成功，则解锁成功</li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul></li></ul><h3 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h3><p>在尝试加轻量级锁的过程中，CAS 操作无法成功，可能是其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为<strong>重量级锁</strong></p><ul><li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</p><p><a href="https://camo.githubusercontent.com/0777aee2712ca38f79fe0ff46d2fc8011322414adb2993afe290b0bf17327c93/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254539253837253844254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836312e706e67"><img src="https://camo.githubusercontent.com/0777aee2712ca38f79fe0ff46d2fc8011322414adb2993afe290b0bf17327c93/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254539253837253844254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836312e706e67" alt="img"></a></p></li><li><p>Thread-1 加轻量级锁失败，进入锁膨胀流程：为 Object 对象申请 Monitor 锁，<strong>通过 Object 对象头获取到持锁线程</strong>，将 Monitor 的 Owner 置为 Thread-0，将 Object 的对象头指向重量级锁地址，然后自己进入 Monitor 的 EntryList BLOCKED</p><p><a href="https://camo.githubusercontent.com/2e4146030a4adc0d564145629706fd3baef75cb0d12142fe3f1cff6a6aa97e86/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254539253837253844254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836322e706e67"><img src="https://camo.githubusercontent.com/2e4146030a4adc0d564145629706fd3baef75cb0d12142fe3f1cff6a6aa97e86/68747470733a2f2f7365617a65616e2e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f696d672f4a6176612f4a55432d254539253837253844254539253837253846254537254241254137254539253934253831254535253845253946254537253930253836322e706e67" alt="img"></a></p></li><li><p>当 Thread-0 退出同步块解锁时，使用 CAS 将 Mark Word 的值恢复给对象头失败，这时进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</p></li></ul><h3 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h3><p>略</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程之后重新获取该锁不再需要同步操作：</p><ul><li>当锁对象第一次被线程获得的时候进入偏向状态，标记为 101，同时<strong>使用 CAS 操作将线程 ID 记录到 Mark Word</strong>。如果 CAS 操作成功，这个线程以后进入这个锁相关的同步块，查看这个线程 ID 是自己的就表示没有竞争，就不需要再进行任何同步操作</li><li>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定或轻量级锁状态</li><li>默认开启偏向锁</li><li>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟。JDK 8 延迟 4s 开启偏向锁原因：在刚开始执行代码时，会有好多线程来抢锁，如果开偏向锁效率反而降低</li><li>添加 VM 参数 <code>-XX:-UseBiasedLocking</code> 禁用偏向锁</li></ul><h4 id="偏向锁撤销情况"><a href="#偏向锁撤销情况" class="headerlink" title="偏向锁撤销情况"></a>偏向锁撤销情况</h4><ul><li>调用对象的 hashCode：偏向锁的对象 MarkWord 中存储的是线程 id，调用 hashCode 导致偏向锁被撤销</li><li>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</li><li>调用 wait&#x2F;notify，需要申请 Monitor，进入 WaitSet</li></ul><h4 id="批量撤销："><a href="#批量撤销：" class="headerlink" title="批量撤销："></a><strong>批量撤销</strong>：</h4><p>如果对象被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID</p><ul><li>批量重偏向：当撤销偏向锁阈值超过 20 次后，JVM 会觉得是不是偏向错了，于是在给这些对象加锁时重新偏向至加锁线程</li><li>批量撤销：当撤销偏向锁阈值超过 40 次后，JVM 会觉得自己确实偏向错了，根本就不该偏向，于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的</li></ul><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除，这是 JVM <strong>即时编译器的优化</strong>（JIT）</p><p>锁消除主要是通过<strong>逃逸分析</strong>来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除</p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>对相同对象多次加锁，导致线程发生多次重入，频繁的加锁操作就会导致性能损耗，可以使用锁粗化方式优化</p><p>如果虚拟机探测到一串的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部</p><ul><li><p>一些看起来没有加锁的代码，其实隐式的加了很多锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> &#123;<br>    <span class="hljs-keyword">return</span> s1 + s2 + s3;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>String 是一个不可变的类，编译器会对 String 的拼接自动优化。在 JDK 1.5 之前，转化为 StringBuffer 对象的连续 append() 操作，每个 append() 方法中都有一个同步块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">concatString</span><span class="hljs-params">(String s1, String s2, String s3)</span> &#123;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    sb.append(s1);<br>    sb.append(s2);<br>    sb.append(s3);<br>    <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>扩展到第一个 append() 操作之前直至最后一个 append() 操作之后，只需要加锁一次就可以</p><h2 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h2><h3 id="保护性暂停"><a href="#保护性暂停" class="headerlink" title="保护性暂停"></a>保护性暂停</h3><p>保护性暂停（Guarded Suspension）是一种并发编程模式，用于解决生产者-消费者问题，即生产者线程在生产数据时，如果消费者线程尚未准备好接收数据，那么生产者线程就需要等待消费者线程准备好再生产数据，以避免浪费资源或者产生错误结果。</p><p>join 源码</p><p><a href="https://imgtg.com/image/VvExN"><img src="https://i.imgtg.com/2023/03/01/VvExN.png" alt="VvExN.png"></a></p><h4 id="单任务"><a href="#单任务" class="headerlink" title="单任务"></a>单任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span> &#123;<br>    <span class="hljs-keyword">private</span> Object response;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-comment">//获取结果</span><br>    <span class="hljs-comment">//timeout :最大等待时间</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-comment">// 1) 记录最初时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">// 2) 已经经历的时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">timePassed</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 4) 假设 millis 是 1000，结果在 400 时唤醒了，那么还有 600 要等</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">waitTime</span> <span class="hljs-operator">=</span> millis - timePassed;<br>                log.debug(<span class="hljs-string">&quot;waitTime: &#123;&#125;&quot;</span>, waitTime);<br>                <span class="hljs-comment">//经历时间超过最大等待时间退出循环</span><br>                <span class="hljs-keyword">if</span> (waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>                    log.debug(<span class="hljs-string">&quot;break...&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait(waitTime);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-comment">// 3) 如果提前被唤醒，这时已经经历的时间假设为 400</span><br>                timePassed = System.currentTimeMillis() - begin;<br>                log.debug(<span class="hljs-string">&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;</span>,<br>                        timePassed, response == <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> response;<br>        &#125;<br>        <br>        <span class="hljs-comment">//产生结果</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Object response)</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-comment">// 条件满足，通知等待线程</span><br>                <span class="hljs-built_in">this</span>.response = response;<br>                log.debug(<span class="hljs-string">&quot;notify...&quot;</span>);<br>                lock.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Mailboxes</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, GuardedObject&gt; boxes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">//产生唯一的id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">generateId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GuardedObject <span class="hljs-title function_">getGuardedObject</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.remove(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GuardedObject <span class="hljs-title function_">createGuardedObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">go</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>(generateId());<br>        boxes.put(go.getId(), go);<br>        <span class="hljs-keyword">return</span> go;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; <span class="hljs-title function_">getIds</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.keySet();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span> &#123;<br>    <span class="hljs-comment">//标识，Guarded Object</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<span class="hljs-comment">//添加get set方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h2><h3 id="传统版"><a href="#传统版" class="headerlink" title="传统版"></a>传统版</h3><p>异步模式之生产者&#x2F;消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareData</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断  防止虚假唤醒</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能生产</span><br>                condition.await();<br>            &#125;<br>            <span class="hljs-comment">// 干活</span><br>            number++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 同步代码块，加锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 防止虚假唤醒</span><br>            <span class="hljs-keyword">while</span>(number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 等待不能消费</span><br>                condition.await();<br>            &#125;<br>            <span class="hljs-comment">// 干活</span><br>            number--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t &quot;</span> + number);<br>            <span class="hljs-comment">// 通知 唤醒</span><br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TraditionalProducerConsumer</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ShareData</span> <span class="hljs-variable">shareData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareData</span>();<br>        <span class="hljs-comment">// t1线程，生产</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            shareData.increment();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-comment">// t2线程，消费</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>shareData.decrement();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="改进版"><a href="#改进版" class="headerlink" title="改进版"></a>改进版</h3><p>异步模式之生产者&#x2F;消费者：</p><ul><li>消费队列可以用来平衡生产和消费的线程资源，不需要产生结果和消费结果的线程一一对应</li><li>生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据</li><li>消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据</li><li>JDK 中各种阻塞队列，采用的就是这种模式</li></ul><p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MessageQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueue</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                queue.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(id,<span class="hljs-string">&quot;值&quot;</span>+id));<br>            &#125;, <span class="hljs-string">&quot;生产者&quot;</span> + i).start();<br>        &#125;<br>        <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> queue.take();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;消费者&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//消息队列类，Java间线程之间通信</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;Message&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//消息的队列集合</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<span class="hljs-comment">//队列容量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">//获取消息</span><br>    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//检查队列是否为空</span><br>        <span class="hljs-keyword">synchronized</span> (list) &#123;<br>            <span class="hljs-keyword">while</span> (list.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;:队列为空，消费者线程等待&quot;</span>);<br>                    list.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//从队列的头部获取消息返回</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> list.removeFirst();<br>            sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;：已消费消息--&quot;</span> + message);<br>            list.notifyAll();<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//存入消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (list) &#123;<br>            <span class="hljs-comment">//检查队列是否满</span><br>            <span class="hljs-keyword">while</span> (list.size() == capacity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sout(Thread.currentThread().getName()+<span class="hljs-string">&quot;:队列为已满，生产者线程等待&quot;</span>);<br>                    list.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//将消息加入队列尾部</span><br>            list.addLast(message);<br>            sout(Thread.currentThread().getName() + <span class="hljs-string">&quot;:已生产消息--&quot;</span> + message);<br>            list.notifyAll();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> Object value;<br><span class="hljs-comment">//get set</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>    BlockingQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br>    producer.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;生产...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            queue.put(<span class="hljs-number">10</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>    consumer.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;等待消费...&quot;</span>);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queue.take();<br>            System.out.println(<span class="hljs-string">&quot;结果为:&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="park-unpark"><a href="#park-unpark" class="headerlink" title="park&amp;&amp;unpark"></a>park&amp;&amp;unpark</h2><p>由三部分组成：_cond, _mutex, _counter</p><p>park：如果 counter 已经为零，获取mutex，进入cond ，线程挂起，否则 counter - 1。</p><p>unpark: 设置 counter 为1， 如果已经在 _cond 中，线程继续运行，_counter - 1。</p><p>LockSupport 出现就是为了增强 wait &amp; notify 的功能：</p><ul><li>wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 park、unpark 不需要</li><li>park &amp; unpark <strong>以线程为单位</strong>来阻塞和唤醒线程，而 notify 只能随机唤醒一个等待线程，notifyAll 是唤醒所有等待线程</li><li>park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先 notify。类比生产消费，先消费发现有产品就消费，没有就等待；先生产就直接产生商品，然后线程直接消费</li><li>wait 会释放锁资源进入等待队列，<strong>park 不会释放锁资源</strong>，只负责阻塞当前线程，会释放 CPU</li></ul><h2 id="死锁定位"><a href="#死锁定位" class="headerlink" title="死锁定位"></a>死锁定位</h2><p>定位死锁的方法：</p><ul><li><p>使用 jps 定位进程 id，再用 <code>jstack id</code> 定位死锁，找到死锁的线程去查看源码，解决优化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-string">&quot;Thread-1&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting formonitor entry [0x000000001f54f000]</span><br>java.lang.Thread.State: BLOCKED (on object monitor)<br><span class="hljs-comment">#省略    </span><br><span class="hljs-string">&quot;Thread-1&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting for monitor entry [0x000000001f54f000]</span><br>java.lang.Thread.State: BLOCKED (on object monitor)<br><span class="hljs-comment">#省略</span><br><br>Found one Java-level deadlock:<br>===================================================<br><span class="hljs-string">&quot;Thread-1&quot;</span>:<br>    waiting to lock monitor 0x000000000361d378 (object 0x000000076b5bf1c0, a java.lang.Object),<br>    <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;Thread-0&quot;</span><br><span class="hljs-string">&quot;Thread-0&quot;</span>:<br>    waiting to lock monitor 0x000000000361e768 (object 0x000000076b5bf1d0, a java.lang.Object),<br>    <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;Thread-1&quot;</span><br>    <br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;Thread-1&quot;</span>:<br>    at thread.TestDeadLock.lambda$main<span class="hljs-variable">$1</span>(TestDeadLock.java:28)<br>    - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)<br>    - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)<br>    at thread.TestDeadLock$$Lambda<span class="hljs-variable">$2</span>/883049899.run(Unknown Source)<br>    at java.lang.Thread.run(Thread.java:745)<br><span class="hljs-string">&quot;Thread-0&quot;</span>:<br>    at thread.TestDeadLock.lambda$main<span class="hljs-variable">$0</span>(TestDeadLock.java:15)<br>    - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)<br>    - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)<br>    at thread.TestDeadLock$$Lambda<span class="hljs-variable">$1</span>/495053715<br></code></pre></td></tr></table></figure></li><li><p>Linux 下可以通过 top 先定位到 CPU 占用高的 Java 进程，再利用 <code>top -Hp 进程id</code> 来定位是哪个线程，最后再用 jstack <pid>的输出来看各个线程栈</p></li><li><p>可以使用 jconsole 工具，在 <code>jdk\bin</code> 目录下</p><p><a href="https://imgtg.com/image/VvVMx"><img src="https://i.imgtg.com/2023/03/01/VvVMx.png" alt="VvVMx.png"></a></p></li></ul><p>点击对应线程检测死锁</p><h2 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h2><p> 两个线程互相改变对方的结束条件，最后谁也无法结束</p><h2 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h2><p>饥饿：一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><h4 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>synchronized 的条件变量，是当条件不满足时进入 WaitSet 等待；ReentrantLock 的条件变量比 synchronized 强大之处在于支持多个条件变量</p><p>ReentrantLock 类获取 Condition 对象：<code>public Condition newCondition()</code></p><p>Condition 类 API：</p><ul><li><code>void await()</code>：当前线程从运行状态进入等待状态，释放锁</li><li><code>void signal()</code>：唤醒一个等待在 Condition 上的线程，但是必须获得与该 Condition 相关的锁</li></ul><p>使用流程：</p><ul><li><p><strong>await &#x2F; signal 前需要获得锁</strong></p></li><li><p>await 执行后，会释放锁进入 ConditionObject 等待</p></li><li><p>await 的线程被唤醒去重新竞争 lock 锁</p></li><li><p><strong>线程在条件队列被打断会抛出中断异常</strong></p></li><li><p>竞争 lock 锁成功后，从 await 后继续执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;    <br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//创建一个新的条件变量</span><br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            System.out.println(<span class="hljs-string">&quot;进入等待&quot;</span>);<br>            <span class="hljs-comment">//进入休息室等待</span><br>            condition1.await();<br>            System.out.println(<span class="hljs-string">&quot;被唤醒了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;    <br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">//叫醒</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;            <br>            lock.lock();<br>            <span class="hljs-comment">//唤醒</span><br>            condition2.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>性能：volatile 修饰的变量进行读操作与普通变量几乎没什么差别，但是写操作相对慢一些，因为需要在本地代码中插入很多内存屏障来保证指令不会发生乱序执行，但是开销比锁要小</p><p>synchronized 无法禁止指令重排和处理器优化，为什么可以保证有序性可见性</p><ul><li>加了锁之后，只能有一个线程获得到了锁，获得不到锁的线程就要阻塞，所以同一时间只有一个线程执行，相当于单线程，由于数据依赖性的存在，单线程的指令重排是没有问题的</li><li>线程加锁前，将<strong>清空工作内存</strong>中共享变量的值，使用共享变量时需要从主内存中重新读取最新的值；线程解锁前，必须把共享变量的最新值<strong>刷新到主内存</strong>中（JMM 内存交互章节有讲）</li></ul><h3 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h3><ul><li>对 volatile 变量的写指令后会加入写屏障</li><li>对 volatile 变量的读指令前会加入读屏障</li></ul><p>写屏障（sfence，Store Barrier）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p><p>读屏障（lfence，Load Barrier）保证在该屏障之后的，对共享变量的读取，从主存刷新变量值，加载的是主存中最新数据</p><p>全能屏障：mfence（modify&#x2F;mix Barrier），兼具 sfence 和 lfence 的功能</p><h2 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h2><p> 原理：自旋锁  + CAS 算法</p><p>循环比较预期值和当前值，相等则修改，否则继续</p><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>常见原子类：AtomicInteger、AtomicBoolean、AtomicLong</p><p>构造方法：</p><ul><li><code>public AtomicInteger()</code>：初始化一个默认值为 0 的原子型 Integer</li><li><code>public AtomicInteger(int initialValue)</code>：初始化一个指定值的原子型 Integer</li></ul><p>常用API：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>public final int get()</td><td>获取 AtomicInteger 的值</td></tr><tr><td>public final int getAndIncrement()</td><td>以原子方式将当前值加 1，返回的是自增前的值</td></tr><tr><td>public final int incrementAndGet()</td><td>以原子方式将当前值加 1，返回的是自增后的值</td></tr><tr><td>public final int getAndSet(int value)</td><td>以原子方式设置为 newValue 的值，返回旧值</td></tr><tr><td>public final int addAndGet(int data)</td><td>以原子方式将输入的数值与实例中的值相加并返回<br />实例：AtomicInteger 里的 value</td></tr></tbody></table><h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p>原子引用：对 Object 进行原子操作，提供一种读和写都是原子性的对象引用变量</p><p>原子引用类：AtomicReference、AtomicStampedReference、AtomicMarkableReference</p><p>AtomicReference 类：</p><ul><li><p>构造方法：<code>AtomicReference&lt;T&gt; atomicReference = new AtomicReference&lt;T&gt;()</code></p></li><li><p>常用 API：</p><ul><li><code>public final boolean compareAndSet(V expectedValue, V newValue)</code>：CAS 操作</li><li><code>public final void set(V newValue)</code>：将值设置为 newValue </li><li><code>public final V get()</code>：返回当前值</li></ul></li></ul><h3 id="ABA的解决"><a href="#ABA的解决" class="headerlink" title="ABA的解决"></a>ABA的解决</h3><ol><li><h4 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h4></li></ol><ul><li><p>构造方法：</p><ul><li><code>public AtomicStampedReference(V initialRef, int initialStamp)</code>：初始值和初始版本号</li></ul></li><li><p>常用API：</p><ul><li><code> public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)</code>：<strong>期望引用和期望版本号都一致</strong>才进行 CAS 修改数据</li><li><code>public void set(V newReference, int newStamp)</code>：设置值和版本号</li><li><code>public V getReference()</code>：返回引用的值</li><li><code>public int getStamp()</code>：返回当前版本号</li></ul></li></ul><ol start="2"><li><h4 id="AtomicMarkableReference"><a href="#AtomicMarkableReference" class="headerlink" title="AtomicMarkableReference"></a>AtomicMarkableReference</h4></li></ol><p>区别：与<code>AtomicStampedReference</code>的区别在于，<code>AtomicMarkableReference</code>使用<code>boolean</code>类型的标记值，而<code>AtomicStampedReference</code>使用<code>int</code>类型的标记值。</p><hr><h3 id="原子更新器"><a href="#原子更新器" class="headerlink" title="原子更新器"></a>原子更新器</h3><p>原子更新器类：AtomicReferenceFieldUpdater、AtomicIntegerFieldUpdater、AtomicLongFieldUpdater</p><p>利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合 volatile 修饰的字段使用，否则会出现异常 <code>IllegalArgumentException: Must be volatile type</code></p><p>常用 API：</p><ul><li><code>static &lt;U&gt; AtomicIntegerFieldUpdater&lt;U&gt; newUpdater(Class&lt;U&gt; c, String fieldName)</code>：构造方法</li><li><code>abstract boolean compareAndSet(T obj, int expect, int update)</code>：CAS</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> field;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AtomicIntegerFieldUpdater</span> <span class="hljs-variable">fieldUpdater</span> <span class="hljs-operator">=</span> AtomicIntegerFieldUpdater<br>            .newUpdater(UpdateDemo.class, <span class="hljs-string">&quot;field&quot;</span>);<br>        <span class="hljs-type">UpdateDemo</span> <span class="hljs-variable">updateDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateDemo</span>();<br>        fieldUpdater.compareAndSet(updateDemo, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>        System.out.println(updateDemo.field);<span class="hljs-comment">//10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="原子累加器"><a href="#原子累加器" class="headerlink" title="原子累加器"></a>原子累加器</h3><p>原子累加器类：LongAdder、DoubleAdder、LongAccumulator、DoubleAccumulator </p><p>LongAdder 和 LongAccumulator 区别：</p><p>相同点：</p><ul><li>LongAddr 与 LongAccumulator 类都是使用非阻塞算法 CAS 实现的</li><li>LongAddr 类是 LongAccumulator 类的一个特例，只是 LongAccumulator 提供了更强大的功能，可以自定义累加规则，当accumulatorFunction 为 null 时就等价于 LongAddr</li></ul><p>不同点：</p><ul><li><p>调用 casBase 时，LongAccumulator 使用 function.applyAsLong(b &#x3D; base, x) 来计算，LongAddr 使用 casBase(b &#x3D; base, b + x) </p></li><li><p>LongAccumulator 类功能更加强大，构造方法参数中</p><ul><li>accumulatorFunction 是一个双目运算器接口，可以指定累加规则，比如累加或者相乘，其根据输入的两个参数返回一个计算值，LongAdder 内置累加规则</li><li>identity 则是 LongAccumulator 累加器的初始值，LongAccumulator 可以为累加器提供非0的初始值，而 LongAdder 只能提供默认的 0</li></ul></li></ul><h3 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h3><p>待续</p><h3 id="LongAddr-源码解析"><a href="#LongAddr-源码解析" class="headerlink" title="LongAddr 源码解析"></a>LongAddr 源码解析</h3><p>待续</p><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h3><p>Unsafe 是 CAS 的核心类，由于 Java 无法直接访问底层系统，需要通过本地（Native）方法来访问</p><p>Unsafe 类存在 sun.misc 包，其中所有方法都是 native 修饰的，都是直接调用<strong>操作系统底层资源</strong>执行相应的任务，基于该类可以直接操作特定的内存数据，其内部方法操作类似 C 的指针</p><p>模拟实现原子整数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">MyAtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAtomicInteger</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (atomicInteger.compareAndSwap(<span class="hljs-number">20</span>)) &#123;<br>        System.out.println(atomicInteger.getValue());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAtomicInteger</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe UNSAFE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> VALUE_OFFSET;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//Unsafe unsafe = Unsafe.getUnsafe()这样会报错，需要反射获取</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>            theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>            UNSAFE = (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">// 获取 value 属性的内存地址，value 属性指向该地址，直接设置该地址的值可以修改 value 的值</span><br>            VALUE_OFFSET = UNSAFE.objectFieldOffset(<br>                   MyAtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAtomicInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> update;<br>            <span class="hljs-comment">//当前对象  内存偏移量    期望值 更新值</span><br>            <span class="hljs-keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="hljs-built_in">this</span>, VALUE_OFFSET, prev, update)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;CAS成功&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinal</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: aload_0<br><span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span> <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="hljs-number">4</span>: aload_0<br><span class="hljs-number">5</span>: bipush <span class="hljs-number">20</span><span class="hljs-comment">// 将值直接放入栈中</span><br><span class="hljs-number">7</span>: putfield #<span class="hljs-number">2</span> <span class="hljs-comment">// Field a:I</span><br>&lt;-- 写屏障<br><span class="hljs-number">10</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>final 变量的赋值通过 putfield 指令来完成，在这条指令之后也会加入写屏障，保证在其它线程读到它的值时不会出现为 0 的情况</p><p>其他线程访问 final 修饰的变量<strong>会复制一份放入栈中</strong>，效率更高</p><p>当其大于SHORT.MAX_VALUE 时放入常量池</p><h3 id="保护性拷贝"><a href="#保护性拷贝" class="headerlink" title="保护性拷贝"></a>保护性拷贝</h3><p>创建副本对象来避免共享的方式称之为保护性拷贝</p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>无状态：成员变量保存的数据也可以称为状态信息，无状态就是没有成员变量</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="线程池设计模式—-享元模式"><a href="#线程池设计模式—-享元模式" class="headerlink" title="线程池设计模式—-享元模式"></a>线程池设计模式—-享元模式</h3><p>享元模式（Flyweight pattern）： 用于减少创建对象的数量，以减少内存占用和提高性能，这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式</p><h3 id="状态信息"><a href="#状态信息" class="headerlink" title="状态信息"></a>状态信息</h3><p>ThreadPoolExecutor 使用 int 的<strong>高 3 位来表示线程池状态，低 29 位表示线程数量</strong>。这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 CAS 原子操作进行赋值。</p><table><thead><tr><th>状态</th><th>高3位</th><th>接收新任务</th><th>处理阻塞任务队列</th><th>说明</th></tr></thead><tbody><tr><td>RUNNING</td><td>111</td><td>Y</td><td>Y</td><td></td></tr><tr><td>SHUTDOWN</td><td>000</td><td>N</td><td>Y</td><td>不接收新任务，但处理阻塞队列剩余任务</td></tr><tr><td>STOP</td><td>001</td><td>N</td><td>N</td><td>中断正在执行的任务，并抛弃阻塞队列任务</td></tr><tr><td>TIDYING</td><td>010</td><td>-</td><td>-</td><td>任务全执行完毕，活动线程为 0 即将进入终结</td></tr><tr><td>TERMINATED</td><td>011</td><td>-</td><td>-</td><td>终止状态</td></tr></tbody></table><p>第一位符号位，从小到大 </p><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>Executors 提供了四种线程池的创建：newCachedThreadPool、newFixedThreadPool、newSingleThreadExecutor、newScheduledThreadPool</p><ul><li><p>newFixedThreadPool：创建一个拥有 n 个线程的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads, <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>核心线程数 &#x3D;&#x3D; 最大线程数（没有救急线程被创建），因此也无需超时时间</li><li>LinkedBlockingQueue 是一个单向链表实现的阻塞队列，默认大小为 <code>Integer.MAX_VALUE</code>，也就是无界队列，可以放任意数量的任务，在任务比较多的时候会导致 OOM（内存溢出）</li><li>适用于任务量已知，相对耗时的长期任务</li></ul></li><li><p>newCachedThreadPool：创建一个可扩容的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE, <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>核心线程数是 0 ，全部都是救急线程（60s 后可以回收），可能会创建大量线程，从而导致 <strong>OOM</strong></p></li><li><p>SynchronousQueue 作为阻塞队列，没有容量，对于每一个 take 的线程会阻塞直到有一个 put 的线程放入元素为止（类似一手交钱、一手交货）</p></li><li><p>适合任务数比较密集，但每个任务执行时间较短的情况</p></li></ul></li><li><p>newSingleThreadExecutor：创建一个只有 1 个线程的单线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>保证所有任务按照<strong>指定顺序执行</strong>，线程数固定为 1，任务数多于 1 时会放入无界队列排队，任务执行完毕，这唯一的线程也不会被释放</li></ul></li></ul><p>对比：</p><ul><li><p>创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，线程池会新建一个线程，保证池的正常工作</p></li><li><p>Executors.newSingleThreadExecutor() 线程个数始终为 1，不能修改。FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法</p><p>原因：父类不能直接调用子类中的方法，需要反射或者创建对象的方式，可以调用子类静态方法</p></li><li><p>Executors.newFixedThreadPool(1) 初始时为 1，可以修改。对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</p></li></ul><p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-newSingleThreadExecutor.png"></p><h4 id="提交方法"><a href="#提交方法" class="headerlink" title="提交方法"></a>提交方法</h4><p>ExecutorService 类 API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void execute(Runnable command)</td><td>执行任务（Executor 类 API）</td></tr><tr><td>Future&lt;?&gt; submit(Runnable task)</td><td>提交任务 task()</td></tr><tr><td>Future submit(Callable<T> task)</td><td>提交任务 task，用返回值 Future 获得任务执行结果</td></tr><tr><td>List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks)</td><td>提交 tasks 中所有任务</td></tr><tr><td>List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks, long timeout, TimeUnit unit)</td><td>提交 tasks 中所有任务，超时时间针对所有task，超时会取消没有执行完的任务，并抛出超时异常</td></tr><tr><td>T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks)</td><td>提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</td></tr></tbody></table><p>execute 和 submit 都属于线程池的方法，对比：</p><ul><li><p>execute 只能执行 Runnable 类型的任务，没有返回值； submit 既能提交 Runnable 类型任务也能提交 Callable 类型任务，底层是<strong>封装成 FutureTask，然后调用 execute 执行</strong></p></li><li><p>execute 会直接抛出任务执行时的异常，submit 会吞掉异常，可通过 Future 的 get 方法将任务执行时的异常重新抛出</p></li></ul><hr><h4 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h4><p>ExecutorService 类 API：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void shutdown()</td><td>线程池状态变为 SHUTDOWN，等待任务执行完后关闭线程池，不会接收新任务，但已提交任务会执行完，而且也可以添加线程（不绑定任务）</td></tr><tr><td>List<Runnable> shutdownNow()</td><td>线程池状态变为 STOP，用 interrupt 中断正在执行的任务，直接关闭线程池，不会接收新任务，会将队列中的任务返回</td></tr><tr><td>boolean isShutdown()</td><td>不在 RUNNING 状态的线程池，此执行者已被关闭，方法返回 true</td></tr><tr><td>boolean isTerminated()</td><td>线程池状态是否是 TERMINATED，如果所有任务在关闭后完成，返回 true</td></tr><tr><td>boolean awaitTermination(long timeout, TimeUnit unit)</td><td>调用 shutdown 后，由于调用线程不会等待所有任务运行结束，如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待</td></tr></tbody></table><hr><h4 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h4><p>execute 会直接抛出任务执行时的异常，submit 会吞掉异常，有两种处理方法</p><p>方法 1：主动捉异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>pool.submit(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;task1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>方法 2：使用 Future 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>Future&lt;?&gt; future = pool.submit(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;task1&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;);<br>System.out.println(future.get());<br></code></pre></td></tr></table></figure><p>任务调度</p><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>Timer 实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>    <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;task 1&quot;</span>);<br>            <span class="hljs-comment">//int i = 1 / 0;//任务一的出错会导致任务二无法执行</span><br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">TimerTask</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;task 2&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 使用 timer 添加两个任务，希望它们都在 1s 后执行</span><br><span class="hljs-comment">// 但由于 timer 内只有一个线程来顺序执行队列中的任务，因此任务1的延时，影响了任务2的执行</span><br>    timer.schedule(task1, <span class="hljs-number">1000</span>);<span class="hljs-comment">//17:45:56 c.ThreadPool [Timer-0] - task 1</span><br>    timer.schedule(task2, <span class="hljs-number">1000</span>);<span class="hljs-comment">//17:45:58 c.ThreadPool [Timer-0] - task 2</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Scheduled"><a href="#Scheduled" class="headerlink" title="Scheduled"></a>Scheduled</h4><p>任务调度线程池 ScheduledThreadPoolExecutor 继承 ThreadPoolExecutor：</p><ul><li>使用内部类 ScheduledFutureTask 封装任务</li><li>使用内部类 DelayedWorkQueue 作为线程池队列</li><li>重写 onShutdown 方法去处理 shutdown 后的任务</li><li>提供 decorateTask 方法作为 ScheduledFutureTask 的修饰方法，以便开发者进行扩展</li></ul><p>构造方法：<code>Executors.newScheduledThreadPool(int corePoolSize)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>    <span class="hljs-comment">// 最大线程数固定为 Integer.MAX_VALUE，保活时间 keepAliveTime 固定为 0</span><br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="hljs-number">0</span>, NANOSECONDS,<br>          <span class="hljs-comment">// 阻塞队列是 DelayedWorkQueue</span><br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>常用 API：</p><ul><li><code>ScheduledFuture&lt;?&gt; schedule(Runnable/Callable&lt;V&gt;, long delay, TimeUnit u)</code>：延迟执行任务</li><li><code>ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable/Callable&lt;V&gt;, long initialDelay, long period, TimeUnit unit)</code>：定时执行周期任务，不考虑执行的耗时，参数为初始延迟时间、间隔时间、单位</li><li><code>ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable/Callable&lt;V&gt;, long initialDelay, long delay, TimeUnit unit)</code>：定时执行周期任务，考虑执行的耗时，参数为初始延迟时间、间隔时间、单位</li></ul><p>基本使用：</p><ul><li><p>延迟任务，但是出现异常并不会在控制台打印，也不会影响其他线程的执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-comment">// 线程池大小为1时也是串行执行</span><br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 添加两个任务，都在 1s 后同时执行</span><br>    executor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;任务1，执行时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-comment">//int i = 1 / 0;</span><br>    <span class="hljs-keyword">try</span> &#123; Thread.sleep(<span class="hljs-number">2000</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; &#125;<br>    &#125;, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<br>    <br>    executor.schedule(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;任务2，执行时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定时任务 scheduleAtFixedRate：<strong>一次任务的启动到下一次任务的启动</strong>之间只要大于等于间隔时间，抢占到 CPU 就会立即执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;start...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <br>    pool.scheduleAtFixedRate(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>    &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br><br><span class="hljs-comment">/*start...Sat Apr 24 18:08:12 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:13 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:15 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:08:17 CST 2021</span><br></code></pre></td></tr></table></figure></li><li><p>定时任务 scheduleWithFixedDelay：<strong>一次任务的结束到下一次任务的启动之间</strong>等于间隔时间，抢占到 CPU 就会立即执行，这个方法才是真正的设置两个任务之间的间隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br>    System.out.println(<span class="hljs-string">&quot;start...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <br>    pool.scheduleWithFixedDelay(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running...&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>    &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br><span class="hljs-comment">/*start...Sat Apr 24 18:11:41 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:42 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:45 CST 2021</span><br><span class="hljs-comment">running...Sat Apr 24 18:11:48 CST 2021</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h3><p>Fork&#x2F;Join：线程池的实现，体现是分治思想，适用于能够进行任务拆分的 CPU 密集型运算，用于<strong>并行计算</strong></p><p>任务拆分：将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列都可以用分治思想进行求解</p><ul><li><p>Fork&#x2F;Join 在<strong>分治的基础上加入了多线程</strong>，把每个任务的分解和合并交给不同的线程来完成，提升了运算效率</p></li><li><p>ForkJoin 使用 ForkJoinPool 来启动，是一个特殊的线程池，默认会创建与 CPU 核心数大小相同的线程池</p></li><li><p>任务有返回值继承 RecursiveTask，没有返回值继承 RecursiveAction</p></li></ul><p>ForkJoinPool 实现了<strong>工作窃取算法</strong>来提高 CPU 的利用率：</p><ul><li>每个线程都维护了一个<strong>双端队列</strong>，用来存储需要执行的任务</li><li>工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行</li><li>窃取的必须是<strong>最晚的任务</strong>，避免和队列所属线程发生竞争，但是队列中只有一个任务时还是会发生竞争</li></ul><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AQS 用状态属性来表示资源的状态（分<strong>独占模式和共享模式</strong>），子类需要定义如何维护这个状态，控制如何获取锁和释放锁</p><ul><li>独占模式是只有一个线程能够访问资源，如 ReentrantLock</li><li>共享模式允许多个线程访问资源，如 Semaphore，ReentrantReadWriteLock 是组合式</li></ul><p>AQS 核心思想：</p><ul><li><p>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置锁定状态</p></li><li><p>请求的共享资源被占用，AQS 用队列实现线程阻塞等待以及被唤醒时锁分配的机制，将暂时获取不到锁的线程加入到队列中</p></li></ul><h3 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>NonfairSync 继承自 AQS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.lock();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>没有竞争：ExclusiveOwnerThread 属于 Thread-0，state 设置为 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.NonfairSync#lock</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 用 cas 尝试（仅尝试一次）将 state 从 0 改为 1, 如果成功表示【获得了独占锁】</span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment">// 设置当前线程为独占线程</span><br>        setExclusiveOwnerThread(Thread.currentThread());<br>    <span class="hljs-keyword">else</span><br>        acquire(<span class="hljs-number">1</span>);<span class="hljs-comment">//失败进入</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第一个竞争出现：Thread-1 执行，CAS 尝试将 state 由 0 改为 1，结果失败（第一次），进入 acquire 逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#acquire</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// tryAcquire 尝试获取锁失败时, 会调用 addWaiter 将当前线程封装成node入队，acquireQueued 阻塞当前线程，</span><br>    <span class="hljs-comment">// acquireQueued 返回 true 表示挂起过程中线程被中断唤醒过，false 表示未被中断过</span><br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        <span class="hljs-comment">// 如果线程被中断了逻辑来到这，完成一次真正的打断效果</span><br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-ReentrantLock-非公平锁1.png" style="zoom:80%;" /><ul><li><p>进入 tryAcquire 尝试获取锁逻辑，这时 state 已经是1，结果仍然失败（第二次），加锁成功有两种情况：</p><ul><li>当前 AQS 处于无锁状态</li><li>加锁线程就是当前线程，说明发生了锁重入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.NonfairSync#tryAcquire</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>&#125;<br><span class="hljs-comment">// 抢占成功返回 true，抢占失败返回 false</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-comment">// state 值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-comment">// 条件成立说明当前处于【无锁状态】</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//如果还没有获得锁，尝试用cas获得，这里体现非公平性: 不去检查 AQS 队列是否有阻塞线程直接获取锁        </span><br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            <span class="hljs-comment">// 获取锁成功设置当前线程为独占锁线程。</span><br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>         &#125;    <br>&#125;    <br>   <span class="hljs-comment">// 如果已经有线程获得了锁, 独占锁线程还是当前线程, 表示【发生了锁重入】</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-comment">// 更新锁重入的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-comment">// 越界判断，当重入的深度很深时，会导致 nextc &lt; 0，int值达到最大之后再 + 1 变负数</span><br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        <span class="hljs-comment">// 更新 state 的值，这里不使用 cas 是因为当前线程正在持有锁，所以这里的操作相当于在一个管程内</span><br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接下来进入 addWaiter 逻辑，构造 Node 队列（不是阻塞队列），前置条件是当前线程获取锁失败，说明有线程占用了锁</p><ul><li>图中黄色三角表示该 Node 的 waitStatus 状态，其中 0 为默认<strong>正常状态</strong></li><li>Node 的创建是懒惰的，其中第一个 Node 称为 <strong>Dummy（哑元）或哨兵</strong>，用来占位，并不关联线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#addWaiter，返回当前线程的 node 节点</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-comment">// 将当前线程关联到一个 Node 对象上, 模式为独占模式   </span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-comment">// 快速入队，如果 tail 不为 null，说明存在队列</span><br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 将当前节点的前驱节点指向 尾节点</span><br>        node.prev = pred;<br>        <span class="hljs-comment">// 通过 cas 将 Node 对象加入 AQS 队列，成为尾节点，【尾插法】</span><br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<span class="hljs-comment">// 双向链表</span><br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始时队列为空，或者 CAS 失败进入这里</span><br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#enq</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>    <span class="hljs-comment">// 自旋入队，必须入队成功才结束循环</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-comment">// 说明当前锁被占用，且当前线程可能是【第一个获取锁失败】的线程，【还没有建立队列】</span><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 设置一个【哑元节点】，头尾指针都指向该节点</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 自旋到这，普通入队方式，首先赋值尾节点的前驱节点【尾插法】</span><br>            node.prev = t;<br>            <span class="hljs-comment">// 【在设置完尾节点后，才更新的原始尾节点的后继节点，所以此时从前往后遍历会丢失尾节点】</span><br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                <span class="hljs-comment">//【此时 t.next  = null，并且这里已经 CAS 结束，线程并不是安全的】</span><br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<span class="hljs-comment">// 返回当前 node 的前驱节点</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-ReentrantLock-非公平锁2.png" style="zoom:80%;" /></li><li><p>线程节点加入队列成功，进入 AbstractQueuedSynchronizer#acquireQueued 逻辑阻塞线程</p><ul><li><p>acquireQueued 会在一个自旋中不断尝试获得锁，失败后进入 park 阻塞</p></li><li><p>如果当前线程是在 head 节点后，会再次 tryAcquire 尝试获取锁，state 仍为 1 则失败（第三次）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// true 表示当前线程抢占锁失败，false 表示成功</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 中断标记，表示当前线程是否被中断</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获得当前线程节点的前驱节点</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">// 前驱节点是 head, FIFO 队列的特性表示轮到当前线程可以去获取锁</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                <span class="hljs-comment">// 获取成功, 设置当前线程自己的 node 为 head</span><br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                <span class="hljs-comment">// 表示抢占锁成功</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 返回当前线程是否被中断</span><br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">// 判断是否应当 park，返回 false 后需要新一轮的循环，返回 true 进入条件二阻塞线程</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())<br>                <span class="hljs-comment">// 条件二返回结果是当前线程是否被打断，没有被打断返回 false 不进入这里的逻辑</span><br>                <span class="hljs-comment">// 【就算被打断了，也会继续循环，并不会返回】</span><br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 【可打断模式下才会进入该逻辑】</span><br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>进入 shouldParkAfterFailedAcquire 逻辑，<strong>将前驱 node 的 waitStatus 改为 -1</strong>，返回 false；waitStatus 为 -1 的节点用来唤醒下一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-comment">// 表示前置节点是个可以唤醒当前节点的节点，返回 true</span><br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 前置节点的状态处于取消状态，需要【删除前面所有取消的节点】, 返回到外层循环重试</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 获取到非取消的节点，连接上当前节点</span><br>        pred.next = node;<br>    <span class="hljs-comment">// 默认情况下 node 的 waitStatus 是 0，进入这里的逻辑</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 【设置上一个节点状态为 Node.SIGNAL】，返回外层循环重试</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-comment">// 返回不应该 park，再次尝试一次</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>shouldParkAfterFailedAcquire 执行完毕回到 acquireQueued ，再次 tryAcquire 尝试获取锁，这时 state 仍为 1 获取失败（第四次）</li><li>当再次进入 shouldParkAfterFailedAcquire 时，这时其前驱 node 的 waitStatus 已经是 -1 了，返回 true</li><li>进入 parkAndCheckInterrupt， Thread-1 park（灰色表示）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 阻塞当前线程，如果打断标记已经是 true, 则 park 会失效</span><br>    LockSupport.park(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 判断当前线程是否被打断，清除打断标记</span><br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再有多个线程经历竞争失败后：</p><p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%813.png"></p></li></ul><hr><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>ReentrantLock#unlock：释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    sync.release(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Thread-0 释放锁，进入 release 流程</p><ul><li><p>进入 tryRelease，设置 exclusiveOwnerThread 为 null，state &#x3D; 0</p></li><li><p>当前队列不为 null，并且 head 的 waitStatus &#x3D; -1，进入 unparkSuccessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AbstractQueuedSynchronizer#release</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-comment">// 尝试释放锁，tryRelease 返回 true 表示当前线程已经【完全释放锁，重入的释放了】</span><br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-comment">// 队列头节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">// 头节点什么时候是空？没有发生锁竞争，没有竞争线程创建哑元节点</span><br>        <span class="hljs-comment">// 条件成立说明阻塞队列有等待线程，需要唤醒 head 节点后面的线程</span><br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ReentrantLock.Sync#tryRelease</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-comment">// 减去释放的值，可能重入</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-comment">// 如果当前线程不是持有锁的线程直接报错</span><br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-comment">// 是否已经完全释放锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 支持锁重入, 只有 state 减为 0, 才完全释放锁成功</span><br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">// 当前线程就是持有锁线程，所以可以直接更新锁，不需要使用 CAS</span><br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进入 AbstractQueuedSynchronizer#unparkSuccessor 方法，唤醒当前节点的后继节点</p><ul><li>找到队列中距离 head 最近的一个没取消的 Node，unpark 恢复其运行，本例中即为 Thread-1</li><li>回到 Thread-1 的 acquireQueued 流程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 当前节点的状态</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;    <br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)        <br>        <span class="hljs-comment">// 【尝试重置状态为 0】，因为当前节点要完成对后续节点的唤醒任务了，不需要 -1 了</span><br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);    <br>    <span class="hljs-comment">// 找到需要 unpark 的节点，当前节点的下一个    </span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;    <br>    <span class="hljs-comment">// 已取消的节点不能唤醒，需要找到距离头节点最近的非取消的节点</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// AQS 队列【从后至前】找需要 unpark 的节点，直到 t == 当前的 node 为止，找不到就不唤醒了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-comment">// 说明当前线程状态需要被唤醒</span><br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-comment">// 置换引用</span><br>                s = t;<br>    &#125;<br>    <span class="hljs-comment">// 【找到合适的可以被唤醒的 node，则唤醒线程】</span><br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>从后向前的唤醒的原因</strong>：enq 方法中，节点是尾插法，首先赋值的是尾节点的前驱节点，此时前驱节点的 next 并没有指向尾节点，从前遍历会丢失尾节点</p></li><li><p>唤醒的线程会从 park 位置开始执行，如果加锁成功（没有竞争），会设置</p><ul><li>exclusiveOwnerThread 为 Thread-1，state &#x3D; 1</li><li>head 指向刚刚 Thread-1 所在的 Node，该 Node 会清空 Thread</li><li>原本的 head 因为从链表断开，而可被垃圾回收（图中有错误，原来的头节点的 waitStatus 被改为 0 了）</li></ul><p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%814.png"></p></li><li><p>如果这时有其它线程来竞争<strong>（非公平）</strong>，例如这时有 Thread-4 来了并抢占了锁</p><ul><li>Thread-4 被设置为 exclusiveOwnerThread，state &#x3D; 1</li><li>Thread-1 再次进入 acquireQueued 流程，获取锁失败，重新进入 park 阻塞</li></ul><p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Java/JUC-ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%815.png"></p></li></ul><h4 id="公平原理"><a href="#公平原理" class="headerlink" title="公平原理"></a>公平原理</h4><p>与非公平锁主要区别在于 tryAcquire 方法：先检查 AQS 队列中是否有前驱节点，没有才去 CAS 竞争</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 先检查 AQS 队列中是否有前驱节点, 没有(false)才去竞争</span><br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 锁重入</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;    <br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>    Node s;    <br>    <span class="hljs-comment">// 头尾指向一个节点，链表为空，返回false</span><br>    <span class="hljs-keyword">return</span> h != t &amp;&amp;<br>        <span class="hljs-comment">// 头尾之间有节点，判断头节点的下一个是不是空</span><br>        <span class="hljs-comment">// 不是空进入最后的判断，第二个节点的线程是否是本线程，不是返回 true，表示当前节点有前驱节点</span><br>        ((s = h.next) == <span class="hljs-literal">null</span> || s.thread != Thread.currentThread());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>explain 参数详解</title>
    <link href="/2023/02/27/explain-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/02/27/explain-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>explain 参数详解</p><!-- more --><blockquote><p>ps：在MySQL中，SELECT语句的执行顺序如下：<br>FROM：指定数据源<br>JOIN：对数据源进行JOIN操作<br>WHERE：对JOIN后的数据进行筛选<br>GROUP BY：按照某个字段进行分组<br>HAVING：对分组后的数据进行筛选<br>SELECT：选择需要的列<br>DISTINCT：去重<br>ORDER BY：排序<br>LIMIT：限制返回的记录数</p></blockquote><h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a><strong>示例图</strong></h3><hr><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img/59377c83825b70ff646429055d973c42.png" alt="img"></p><h3 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h3><hr><p>查询编号，表示查询中执行 SELECT 的序列号。对于简单的 SELECT 查询，这个值为 1，对于复杂查询，这个值会逐个递增。</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h3><hr><p>SELECT 查询的类型，包括以下几种：</p><ul><li><p>SIMPLE：简单的 SELECT 查询，不包含子查询或者 UNION。</p></li><li><p>PRIMARY：最外层的 SELECT 查询。</p></li><li><p>DERIVED：派生表的 SELECT 语句。</p></li></ul><p>SELECT t1.idFROM table1 t1 JOIN(SELECT id FROM table2) t2 ON t1.id&#x3D; t2.id;</p><p>在这个查询中，子查询 (SELECT id FROM table2) 返回一个结果集，该结果集会被存储在内存中或者磁盘上，然后被命名为 t2，作为派生表使用。这个派生表 t2 会被作为参数传递给外层查询，用来完成 JOIN 操作。因此这个查询的 select_type 是 DERIVED。</p><ul><li>SUBQUERY</li></ul><p>例如，在以下查询中，子查询返回每个用户的平均评分，外部查询则通过 HAVING 子句过滤出评分高于平均值的用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> user_id,<span class="hljs-built_in">AVG</span>(rating)<span class="hljs-keyword">as</span> avg_rating<br><br><br><br><span class="hljs-keyword">FROM</span> ratings<br><br><br><br>GROUPBY user_id<br><br><br><br>HAVINGAVG(rating)<span class="hljs-operator">&gt;</span>(SELECTAVG(rating)<span class="hljs-keyword">FROM</span> ratings)<br></code></pre></td></tr></table></figure><p>在这种情况下，SELECT AVG(rating) FROM ratings 是一个子查询，它返回整个 ratings 表中所有评分的平均值。</p><ul><li>UNION：表示查询中使用了UNION操作，并且从创建的派生表中检索数据。例如，以下查询将从两个表中检索最高薪水的员工，并使用UNION操作将结果组合在一起：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> emp_id,<span class="hljs-built_in">MAX</span>(salary)<span class="hljs-keyword">FROM</span> employees GROUPBY emp_id<br><br><br><br><span class="hljs-keyword">UNION</span><br><br><br><br><span class="hljs-keyword">SELECT</span> emp_id,<span class="hljs-built_in">MAX</span>(salary)<span class="hljs-keyword">FROM</span> contractors GROUPBY emp_id;<br></code></pre></td></tr></table></figure><p>这个查询使用UNION将两个SELECT语句的结果组合在一起，并使用派生表来处理这些结果。</p><ul><li>DEPENDENT UNION：表示在UNION查询中，子查询依赖于外部查询的结果集，也称作依赖联合查询。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table1<br><br><br><br><span class="hljs-keyword">UNION</span><br><br><br><br><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table2 <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span>(SELECTCOUNT(<span class="hljs-operator">*</span>)<span class="hljs-keyword">FROM</span> table1)<br></code></pre></td></tr></table></figure><p>这个查询将table1和table2的数据合并，并返回id和name列的值。在第二个SELECT子查询中，查询的结果依赖于第一个SELECT子查询的结果。</p><ul><li>DEPENDENT SUBQUERY：表示一个依赖于外部查询的子查询。</li></ul><p>当一个子查询中的表引用了外部查询的表时，就会产生依赖关系，即该子查询需要等待外部查询执行完毕才能开始执行，因此在执行过程中会使用到外部查询中的值。</p><p>下面是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> u.id, u.name<br><br><br><br><span class="hljs-keyword">FROM</span> users u <br><br><br><br><span class="hljs-keyword">WHERE</span>(SELECTAVG(amount)<span class="hljs-keyword">FROM</span> orders o <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.id)<span class="hljs-operator">&lt;</span>(<span class="hljs-keyword">SELECT</span> amount <span class="hljs-keyword">FROM</span> orders o <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.idORDERBY amount DESCLIMIT1)<br></code></pre></td></tr></table></figure><p>这里包含两个子查询，其中第一个子查询 (SELECT AVG(amount) FROM orders o WHERE o.user_id &#x3D; u.id) 用于计算该用户的平均订单金额，第二个子查询 (SELECT amount FROM orders o WHERE o.user_id &#x3D; u.id ORDER BY amount DESC LIMIT 1) 用于查询该用户的订单中金额最大的一笔订单的金额。这两个子查询都是与外部查询有关联的，因此被标记为 DEPENDENT SUBQUERY。</p><ul><li>UNCACHEABLE SUBQUERY：子查询不能被缓存，必须重新计算每个外部查询。</li></ul><p>举个例子，假设我们有一个用户表（user）和一个订单表（order），我们想查询每个用户的订单数量。我们可以使用以下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><br><br><br>  u.id,<br><br><br><br>  u.name,<br><br><br><br>  (<br><br><br><br>    SELECTCOUNT(<span class="hljs-operator">*</span>)<br><br><br><br>    FROMorder o <br><br><br><br>    <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.id<br><br><br><br>  )<span class="hljs-keyword">AS</span> order_count<br><br><br><br>FROMuser u;<br></code></pre></td></tr></table></figure><p>这个查询中，子查询中的 COUNT(*) 函数需要根据 user_id 来计算每个用户的订单数量，而 user_id 来自外层查询的表。因为这个关联条件是动态计算的，因此 MySQL 不能对子查询进行缓存，因此该子查询就被标记为 UNCACHEABLE SUBQUERY。</p><ul><li>UNCACHEABLE UNION：</li></ul><p>表示该查询的 UNION 子句不可缓存，需要在每次执行时重新计算。这通常是因为 UNION 的两个 SELECT 语句中包含的字段类型不同，或者两个查询中的 ORDER BY 子句不同，导致 MySQL 无法缓存结果集，需要重新计算。</p><ul><li>UNION RESULT：UNION 的结果。</li></ul><h3 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h3><hr><p>显示此行查询的是哪个表。</p><h3 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h3><hr><p>匹配的分区列表，使用了分区表才有此列。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><hr><p>访问类型，包括以下几种：</p><ul><li><p>ALL：Full Table Scan，表示全表扫描。</p></li><li><p>index：Full Index Scan，表示索引扫描。</p></li><li><p>range：表示索引范围扫描，常用于带有 between 和 in 的查询语句。</p></li><li><p>ref：表示使用非唯一索引或唯一索引的非唯一前缀查询，例如 where id &#x3D; 10。</p></li><li><p>eq_ref：表示使用唯一索引查询，例如 where id &#x3D; 10。</p></li><li><p>const、system：表示查询中只有一行或少数几行时使用的索引查询方式。</p></li></ul><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h3><hr><p>显示查询语句中可能使用到的索引。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h3><hr><p>实际使用的索引。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h3><hr><p>使用的索引长度。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h3><hr><p>显示索引的哪一列被使用了，常见的是一个常量或者一个索引列的名字。</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h3><hr><p>预计查询返回的行数。</p><h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h3><hr><p>该查询条件所过滤的数据行百分比。</p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a><strong>Extra</strong></h3><hr><p>包含对查询的补充信息，通常包括以下几种：</p><ul><li><p>Using index：表示该查询使用了覆盖索引，避免了回表查询，提高了查询效率。</p></li><li><p>Using where：表示该查询使用了WHERE条件语句。</p></li><li><p>Using temporary：表示MySQL需要使用临时表来处理查询，可能是由于GROUP BY和ORDER BY等操作导致的。</p></li><li><p>Using filesort：表示MySQL需要使用文件排序，可能是由于GROUP BY和ORDER BY等操作导致的。</p></li></ul><p>表示查询中涉及到的排序操作无法使用索引完成，需要对结果集进行文件排序（Filesort）。文件排序操作需要先将需要排序的列从表中读取到内存中，然后进行排序操作，最后返回结果。</p><ul><li><p>Using join buffer：表示MySQL需要使用连接缓存，加快查询效率。</p></li><li><p>Impossible where：表示WHERE条件无法满足，该查询不会返回任何数据。</p></li><li><p>Select tables optimized away：表示MySQL优化了查询，直接返回了结果，没有实际查询任何数据。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法索引</title>
    <link href="/2023/02/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/02/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<!-- more --><blockquote><p>学习相关算法时，使用的相关博文和模板的集合</p></blockquote><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p><a href="https://leetcode.cn/problems/my-calendar-ii/solutions/1681245/by-lfool-nodi/">线段树相关知识</a></p><p>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 线段树（动态开点）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LFool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/6/7 09:15</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SegmentTreeDynamic</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node left, right;<br>        <span class="hljs-type">int</span> val, add;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) &#123;<br>            node.val += (end - start + <span class="hljs-number">1</span>) * val;<br>            node.add += val;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>        pushDown(node, mid - start + <span class="hljs-number">1</span>, end - mid);<br>        <span class="hljs-keyword">if</span> (l &lt;= mid) update(node.left, start, mid, l, r, val);<br>        <span class="hljs-keyword">if</span> (r &gt; mid) update(node.right, mid + <span class="hljs-number">1</span>, end, l, r, val);<br>        pushUp(node);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) <span class="hljs-keyword">return</span> node.val;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>        pushDown(node, mid - start + <span class="hljs-number">1</span>, end - mid);<br>        <span class="hljs-keyword">if</span> (l &lt;= mid) ans += query(node.left, start, mid, l, r);<br>        <span class="hljs-keyword">if</span> (r &gt; mid) ans += query(node.right, mid + <span class="hljs-number">1</span>, end, l, r);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(Node node)</span> &#123;<br>        node.val = node.left.val + node.right.val;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushDown</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> leftNum, <span class="hljs-type">int</span> rightNum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) node.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        <span class="hljs-keyword">if</span> (node.right == <span class="hljs-literal">null</span>) node.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        <span class="hljs-keyword">if</span> (node.add == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>        node.left.val += node.add * leftNum;<br>        node.right.val += node.add * rightNum;<br>        <span class="hljs-comment">// 对区间进行「加减」的更新操作，下推懒惰标记时需要累加起来，不能直接覆盖</span><br>        node.left.add += node.add;<br>        node.right.add += node.add;<br>        node.add = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildTree</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-comment">// 到达叶子节点</span><br>    <span class="hljs-keyword">if</span> (start == end) &#123;<br>        node.val = arr[start];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>    buildTree(node.left, start, mid);<br>    buildTree(node.right, mid + <span class="hljs-number">1</span>, end);<br>    <span class="hljs-comment">// 向上更新</span><br>    pushUp(node);<br>&#125;<br><span class="hljs-comment">// 向上更新</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(Node node)</span> &#123;<br>    node.val = node.left.val + node.right.val;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p><a href="https://www.cnblogs.com/gaopeng527/p/4887765.html#:~:text=%E5%AD%97%E5%85%B8%E6%A0%91%EF%BC%88Trie%EF%BC%89%E7%9A%84java%E5%AE%9E%E7%8E%B0%20.,%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89.%20%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%88%E7%A7%B0%E5%8D%95%E8%AF%8D%E6%9F%A5%E6%89%BE%E6%A0%91%EF%BC%8CTrie%E6%A0%91%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E5%93%88%E5%B8%8C%E6%A0%91%E7%9A%84%E5%8F%98%E7%A7%8D%E3%80%82%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E6%98%AF%E7%94%A8%E4%BA%8E%E7%BB%9F%E8%AE%A1%EF%BC%8C%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BF%9D%E5%AD%98%E5%A4%A7%E9%87%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E4%BD%86%E4%B8%8D%E4%BB%85%E9%99%90%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E7%BB%8F%E5%B8%B8%E8%A2%AB%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BA%8E%E6%96%87%E6%9C%AC%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E3%80%82%E5%AE%83%E7%9A%84%E4%BC%98%E7%82%B9%E6%98%AF%EF%BC%9A%E5%88%A9%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80%E6%9D%A5%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%EF%BC%8C%E6%9C%80%E5%A4%A7%E9%99%90%E5%BA%A6%E5%9C%B0%E5%87%8F%E5%B0%91%20">字典树相关知识</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247489106&idx=1&sn=b7c1d4864f42e8a54f4b4754ff9ba8d7&chksm=fd9cbd4dcaeb345b5e39e799bdbeb2e89ed424c763e2af2a23fcb8eab228acc46d10f0395686&scene=178&cur_album_id=1817026489800802305#rd">题目</a><br>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>        <span class="hljs-keyword">private</span> TrieNode root;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>            root.wordEnd = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(word.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    node.childdren.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>());<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            node.wordEnd = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(word.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> found &amp;&amp; node.wordEnd;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(prefix.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> found;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>        Map&lt;Character, TrieNode&gt; childdren;<br>        <span class="hljs-type">boolean</span> wordEnd;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrieNode</span><span class="hljs-params">()</span> &#123;<br>            childdren = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, TrieNode&gt;();<br>            wordEnd = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h1><p><a href="https://blog.csdn.net/qq_37795916/article/details/123814643">基础</a><br><a href="https://leetcode.cn/problems/shortest-path-with-alternating-colors/">例题</a><br>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-type">int</span> next;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> w)</span>&#123;<br>    edges[cnt] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>();<span class="hljs-comment">//创建一条边将其放入边集数组</span><br>    edges[cnt].to = v;<br>    edges[cnt].w = w;<br>    edges[cnt].next = head[u];<br>    head[u] = cnt++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="十大排序算法"><a href="#十大排序算法" class="headerlink" title="十大排序算法"></a>十大排序算法</h1><p><a href="https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">基础</a><br>题目<br><a href="https://leetcode.cn/problems/query-kth-smallest-trimmed-number/solution/by-tsreaper-hlt7/">基数排序的妙用</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线程池核心参数</title>
    <link href="/2023/02/25/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0/"/>
    <url>/2023/02/25/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h1><p>表示线程池中维护的核心线程数。核心线程是一直存在的线程，当线程池中的任务数量超过核心线程数时，任务会被加入任务队列中，等待核心线程来处理。</p><blockquote><p>这里需要注意的是：在刚刚创建ThreadPoolExecutor的时候，线程并不会立即启动，而是要等到有任务提交时才会启动，除非调用了prestartCoreThread&#x2F;prestartAllCoreThreads事先启动核心线程。再考虑到keepAliveTime和allowCoreThreadTimeOut超时参数的影响，所以没有任务需要执行的时候，线程池的大小不一定是corePoolSize。</p></blockquote><p>当线程池中的任务数量不断增加，超过了核心线程数和任务队列的容量时，线程池就会创建新的线程来处理任务，直到达到 <code>maximumPoolSize</code> 的限制。如果线程池中的线程数量大于核心线程数，但小于最大线程数，当空闲线程的空闲时间超过了 <code>keepAliveTime</code> 参数设定的时间时，这些线程会被终止并从线程池中移除。</p><h1 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h1><p>表示线程池中最多能创建的线程数量。当线程池中的线程数达到这个数量后，线程池将不再创建新的线程。</p><h1 id="WorkQueue"><a href="#WorkQueue" class="headerlink" title="WorkQueue"></a>WorkQueue</h1><p>表示线程池中的任务队列。任务队列用于存放尚未被执行的任务，待核心线程空闲时会从任务队列中取出任务进行处理。</p><p>线程池的任务队列可以分为两种类型：</p><ul><li><p>有界队列。有界队列的大小是固定的，当队列已满时，新的任务将被拒绝。</p></li><li><p>无界队列。无界队列的大小没有限制，可以存放任意数量的任务。</p></li></ul><p>常见的任务队列类型有以下几种：</p><ol><li><p><code>ArrayBlockingQueue</code>：一个由数组结构组成的有界阻塞队列。</p></li><li><p><code>LinkedBlockingQueue</code>：一个由链表结构组成的有界阻塞队列。</p></li><li><p><code>SynchronousQueue</code>：一个不存储元素的阻塞队列，每个插入操作必须等待一个相应的删除操作，否则插入操作将一直处于阻塞状态。</p></li></ol><p>根据实际情况，选择不同的任务队列类型可以实现更高效的任务处理。如果任务数量较少，可以选择无界队列；如果任务数量较多，可以选择有界队列，避免内存溢出。同时，需要根据任务的特性和系统资源的限制来调整任务队列的大小和类型。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于redo log 刷盘时机</title>
    <link href="/2023/01/21/%E5%85%B3%E4%BA%8Eredo-log-%E5%88%B7%E7%9B%98%E6%97%B6%E6%9C%BA/"/>
    <url>/2023/01/21/%E5%85%B3%E4%BA%8Eredo-log-%E5%88%B7%E7%9B%98%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<!-- more --><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a><strong>概要</strong></h3><hr><p><strong>索引是一种用于快速查询和检索数据的数据结构</strong>。</p><p>在MySQL中使用较多的索引有 Hash 索引、B+树索引等。而我们经常使用的 InnoDB 存储引擎的默认索引实现为 B+ 树索引。</p><h3 id="为什么不用-Hash-索引？"><a href="#为什么不用-Hash-索引？" class="headerlink" title="为什么不用 Hash 索引？"></a><strong>为什么不用 Hash 索引？</strong></h3><hr><p>Hash 索引通过计算 key 寻找 value ，查询单值为 O(1) ，但是当需要遍历的时候， 即需要范围查询时， 也需要计算一个个计算，开销太大。</p><h3 id="InnoDB的索引策略"><a href="#InnoDB的索引策略" class="headerlink" title="InnoDB的索引策略"></a><strong>InnoDB的索引策略</strong></h3><hr><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a><strong>聚簇索引</strong></h4><p>聚簇索引： 使用主键值进行记录和页的排序，B+ 树的叶子节点存储一条完整记录内容。</p><p>InnoDB 通过聚簇索引存储数据。</p><p>InnoDB 的页分为目录项与普通记录，以 B+ 树的形式组织。而目录项仅记录主键值和页编号。</p><h4 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a><strong>二级索引</strong></h4><p>二级索引：根据索引列建立的 B+ 树。</p><p>二级索引目录项除了索引列值，页号外，也需要存储主键值。如此才能在索引列值相等的时候，正确的分配页的位置，而叶子节点为了节约空间仅存储主键值和索引列的值，如果需要获取全部数据，需要进行回表操作（根据主键值再次查询聚簇索引）。</p><h4 id="唯一二级索引"><a href="#唯一二级索引" class="headerlink" title="唯一二级索引"></a><strong>唯一二级索引</strong></h4><p>当索引是 unique 时， 二级索引称为唯一二级索引。</p><p>当对于唯一二级索引来说，在 unique 列可以存储多个 NULL 值，所以其目录项也需要存储主键值。</p><h3 id="建立索引的原则"><a href="#建立索引的原则" class="headerlink" title="建立索引的原则"></a><strong>建立索引的原则</strong></h3><hr><ol><li>只为用于搜索、排序、分组的列创建索引</li><li>重复数占比小的时候建立索引</li><li>索引列的类型尽量小</li><li>可以建立前缀索引，节约空间</li><li>尽量覆盖索引，节约回表开销</li><li>为了避免聚簇索引产生页面分裂的情况，<strong>建议使主键拥有自增属性</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中心扩散法</title>
    <link href="/2022/11/07/%E4%B8%AD%E5%BF%83%E6%89%A9%E6%95%A3%E6%B3%95/"/>
    <url>/2022/11/07/%E4%B8%AD%E5%BF%83%E6%89%A9%E6%95%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>中心扩散法求最长回文子串</p><!-- more --><p>中心扩散法求字符串 s 中的<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E6%96%87%E4%B8%B2&spm=1001.2101.3001.7020">回文串</a>的最长子串时：</p><p>求当前字符串下标 i 的最长回文串思路步骤：</p><p>1. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">while</span> (--left &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == s.charAt(left)) &#123;<span class="hljs-comment">// 计算 i 前与 i 处相等的字符个数</span><br>    逻辑代码;<br>&#125;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>2. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">rigth</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">while</span> (++right &lt; s.length() - <span class="hljs-number">1</span> &amp;&amp; s.charAt(i) == s.charAt(right))&#123;<span class="hljs-comment">// 计算 i 后与 i 处相等的字符个数</span><br>    逻辑代码;<br>&#125;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>3. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (--left &gt; <span class="hljs-number">0</span> &amp;&amp; ++right &lt; s.length() - <span class="hljs-number">1</span> &amp;&amp; s.charAt(left) == s.charAt(right))&#123; <span class="hljs-comment">// 比较左右字符相等数目</span><br>逻辑代码;<br>&#125;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>重复计算过多，可采取 dp 。 (虽然但是， dp写多了， 反而是想不到前面的中心扩散， 但弄完后， 前面的难度明显比 dp 难度低， 总而言之我是**)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i, right = i;<br>     <span class="hljs-keyword">while</span> (s.charAt(left) == s.charAt(right) &amp;&amp; (right - left &lt; <span class="hljs-number">3</span> || dp[left + <span class="hljs-number">1</span>][right - <span class="hljs-number">1</span>])) &#123; <br>         <span class="hljs-comment">// dp[left][right] 表示 left 到 right 之间是回文串</span><br>     dp[left][right] = <span class="hljs-literal">true</span>;<br>     &#125;<br>&#125;<br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>例题：</p><ol><li>最长回文子串</li></ol><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2&spm=1001.2101.3001.7020">回文子串</a>。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>题目来源：<a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串 - 力扣（Leetcode）</a></p><p>参考题解：<a href="https://leetcode.cn/problems/longest-palindromic-substring/solutions/63641/zhong-xin-kuo-san-fa-he-dong-tai-gui-hua-by-reedfa/">5. 最长回文子串 - 力扣（Leetcode）</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>char与varchar占用_MySQL笔记</title>
    <link href="/2022/11/06/char%E4%B8%8Evarchar%E5%8D%A0%E7%94%A8-MySQL%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/06/char%E4%B8%8Evarchar%E5%8D%A0%E7%94%A8-MySQL%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="char与varchar占用"><a href="#char与varchar占用" class="headerlink" title="char与varchar占用"></a>char与varchar占用</h2><p>广义上，char(m) 占用那个字节，varchar(m) 最多占用 m 个字节，由占用字节和记录长度的字节组成。</p><blockquote><p>ps：以下皆在使用 InnoDB 时，在 COMPACT 格式下的情况</p></blockquote><h3 id="varchar-m-与-varchar-2m-的区别"><a href="#varchar-m-与-varchar-2m-的区别" class="headerlink" title="varchar(m) 与 varchar(2m)的区别"></a>varchar(m) 与 varchar(2m)的区别</h3><h4 id="InnoDB行格式类型（Compact格式）"><a href="#InnoDB行格式类型（Compact格式）" class="headerlink" title="InnoDB行格式类型（Compact格式）"></a>InnoDB行格式类型（Compact格式）</h4><p>Compact行格式示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//20200806232022339.png" alt="img"></p><blockquote><p>图片来自<a href="https://blog.csdn.net/liuming690452074/article/details/113820877">Mysql compact行格式_千百元的博客-CSDN博客_compact行格式</a></p></blockquote><h4 id="varchar-占用构成"><a href="#varchar-占用构成" class="headerlink" title="varchar 占用构成"></a>varchar 占用构成</h4><p>varchar是变长字段，由真正的数据内容和该数据占用的字节数组成。</p><p>而数据占用的字节数存储在变长字段列表如(下图)， ps：这个长度在变长字段列表逆序存放。</p><h5 id="varchar-m-长度在变长字段列表的占用"><a href="#varchar-m-长度在变长字段列表的占用" class="headerlink" title="varchar(m) 长度在变长字段列表的占用"></a>varchar(m) 长度在变长字段列表的占用</h5><p>varchar(m) 允许占用 m * n （n 取决于编码字符集使用多少个字节表示一个字符)， 当其实际占用 i 个字节时</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. m * n &lt;= <span class="hljs-number">255</span> 其在变长字段列表占用<span class="hljs-number">1</span>个字节<br><span class="hljs-attribute">2</span>. m * n &gt; <span class="hljs-number">255</span> &amp;&amp; i &lt;= <span class="hljs-number">127</span>， 其在变长字段列表占用<span class="hljs-number">1</span>个字节<br><span class="hljs-attribute">3</span>. m * n &gt; <span class="hljs-number">255</span> &amp;&amp; i &gt; <span class="hljs-number">127</span>， 其在变长字段列表占用<span class="hljs-number">2</span>个字节<br><span class="hljs-attribute">123</span><br></code></pre></td></tr></table></figure><h3 id="char-m-一定是占用-m-个字节吗？"><a href="#char-m-一定是占用-m-个字节吗？" class="headerlink" title="char(m) 一定是占用 m 个字节吗？"></a>char(m) 一定是占用 m 个字节吗？</h3><p> 仅当使用定长编码字符集（如 ascii ）的时候，才是固定占用m个字节。</p><p> 当使用变长编码字符集的时候，会像 varchar 一样在变长字段长度列表中存储占用的字节长度。例如：当使用 utf8 字符集的时候，varchar(m) 占用字节长度在m3m。（utf8表示一个字符占用13个字节）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
