<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>idea在archlinux下无法使用fctitx5</title>
    <link href="/2024/03/18/idea%E5%9C%A8archlinux%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fctitx5/"/>
    <url>/2024/03/18/idea%E5%9C%A8archlinux%E4%B8%8B%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8fctitx5/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用了三个多月archlinux了，记录一下踩坑点。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="查论坛帖子"><a href="#查论坛帖子" class="headerlink" title="查论坛帖子"></a>查论坛帖子</h2><p><a href="https://bbs.archlinuxcn.org/viewtopic.php?id=12645">参考帖子合集</a></p><h2 id="看相关日志"><a href="#看相关日志" class="headerlink" title="看相关日志"></a>看相关日志</h2><p><code>fcitx-diagnose</code></p><h2 id="在idea论坛提question，也可以去arch-linux论坛提问"><a href="#在idea论坛提question，也可以去arch-linux论坛提问" class="headerlink" title="在idea论坛提question，也可以去arch linux论坛提问"></a>在idea论坛提question，也可以去arch linux论坛提问</h2><h2 id="解决方法总结"><a href="#解决方法总结" class="headerlink" title="解决方法总结"></a>解决方法总结</h2><h3 id="网上方法"><a href="#网上方法" class="headerlink" title="网上方法"></a>网上方法</h3><ol><li>确保包安装全面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S fcitx5 fcitx5-im fcitx5-qt fcitx5-gtk fcitx5-chinese-addons fcitx5-configtool fcitx5-rime <br></code></pre></td></tr></table></figure><ol start="2"><li>更改idea.sh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">---------------------------------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Run the IDE.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">---------------------------------------------------------------------</span><br><br>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XIM=fcitx<br>export XIM_PROGRAM=fcitx<br>export XMODIFIERS=&quot;@im=fcitx&quot;<br>export SDL_IM_MODULE=fcitx<br>export LC_CTYPE=zh_CN.UTF-8<br></code></pre></td></tr></table></figure><ol start="3"><li>更换jre</li></ol><p>（但是据说这个bug已经修复了）</p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/image-20240318161546085.png" alt="image-20240318161546085"></p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/image-20240318161624550.png" alt="image-20240318161624550"></p><ol start="4"><li>查看环境变量</li></ol><p>路径：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo Vim /etc/environment<br></code></pre></td></tr></table></figure><p>wayland 环境下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">XMODIFIERS=@im=fcitx<br></code></pre></td></tr></table></figure><p>x11 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br>GLFW_IM_MODULE=ibus<br><br></code></pre></td></tr></table></figure><h3 id="我的解决方法"><a href="#我的解决方法" class="headerlink" title="我的解决方法"></a>我的解决方法</h3><ol start="5"><li>最关键的一点：不要导入Windows端idea的配置文件，可以使用网络同步（因为网络同步是不全面的，狗头保命），但千万不要导入本地保存的配置文件</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>追番最优解autobangumi踩坑实录--vmware中用archlinux采用docker部署</title>
    <link href="/2024/02/07/%E8%BF%BD%E7%95%AA%E6%9C%80%E4%BC%98%E8%A7%A3autobangumi%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95-vmware%E4%B8%AD%E7%94%A8archlinux%E9%87%87%E7%94%A8docker%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/02/07/%E8%BF%BD%E7%95%AA%E6%9C%80%E4%BC%98%E8%A7%A3autobangumi%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95-vmware%E4%B8%AD%E7%94%A8archlinux%E9%87%87%E7%94%A8docker%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h1><p>在没有b的情况下看番都不够优雅，看相关在线网站画质不行，且不能选自己想要的字幕组</p><p>使用相关网站下载，需要自己重命名，看的多了还要自己归档，每周一次打开网站下载，又太麻烦。</p><p>综上autobangumi就是完美的方案，订阅后，季初选择想看的番，每周自动下载，文件自动归档与重命名</p><p>成果展示<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//11.png"><br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//22.png"></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><a href="https://www.autobangumi.org/">AutoBangumi | 自动追番，解放双手！</a></p><p><a href="https://www.himiku.com/archives/auto-bangumi.html">私人博客</a></p><h1 id="踩坑实录"><a href="#踩坑实录" class="headerlink" title="踩坑实录"></a>踩坑实录</h1><h2 id="不要用wsl，与docker-desktop（会变得不幸）"><a href="#不要用wsl，与docker-desktop（会变得不幸）" class="headerlink" title="不要用wsl，与docker desktop（会变得不幸）"></a>不要用wsl，与docker desktop（会变得不幸）</h2><ol><li>内存占用特别离谱，开完就跑了个qbitorrent与AutoBangumi以及watchover，电脑内存就不够用了，要无感使用不够优雅，要优雅可以或许可以使用Windows的定时任务，使其在深夜自动运行，但是AutoBangumi必须在qbitorrent启动后启动，或许可以使用linux定时任务（但在ws中l这个该怎么弄？）</li><li>wsl内存不会自动释放，当你运行一段时间后（溢出后），会出现资源不可用的提示（这个问题在网上看了一眼好像从21年就有，或许有解决方案，没细看，因为不用的主要原因不是这个）</li><li>linux containers在bridge下，桥接的是宿主机的网络，所以不能ping通容器的ip。</li><li>如官方使用bridge，当你下载器的地址填docker网关时，AutoBangumi能连qbitorrent，但是其访问下载器ui超时。</li><li>如果填宿主机ip，会显示拒绝连接，图省事，反正就自己主机跑你可以如下设置<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//e815bd04ee994eef9002136c18be480f.png" alt="在这里插入图片描述"></li></ol><h2 id="使用VMware并运行archlinux，与电脑共享下载动漫的文件夹"><a href="#使用VMware并运行archlinux，与电脑共享下载动漫的文件夹" class="headerlink" title="使用VMware并运行archlinux，与电脑共享下载动漫的文件夹"></a>使用VMware并运行archlinux，与电脑共享下载动漫的文件夹</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p><a href="https://arch.icekylin.online/">archlinux 简明指南 | archlinux 简明指南 (icekylin.online)</a></p><p><a href="https://juejin.cn/post/7092761463567155213">在 VMware 中安装 ArchLinux - 掘金 (juejin.cn)</a></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>1.推荐安装过程中给最少2G内存，安装后1G即可，25G硬盘，cpu给满</p><p>2.使用open-vm-tools，而不是官方的vm-tools</p><p>卸载vm-tools：vmware-uninstall-tools.pl</p><p>参考： <a href="https://wiki.archlinux.org/title/VMware/Install_Arch_Linux_as_a_guest">Arch Linux - ArchWiki</a></p><p><a href="https://www.wnark.com/archives/162.html">Arch Linux安装VMware Tools教程 - 方舟基地 (wnark.com)</a></p><p>3.如果archlinux 汉化不完全，且一切设置如教程，删除<code>~/.config/plasma-localerc</code>文件重启</p><p>源自：<a href="https://bbs.archlinuxcn.org/viewtopic.php?id=12179">archlinux 汉化</a></p><p>4.共享的文件夹需要挂载，</p><p>命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other`</span><br><br># <span class="hljs-string">`mount：这是Unix/Linux系统中用于挂载文件系统的命令。`</span><br><br># <span class="hljs-string">`-t fuse.vmhgfs-fuse：这指定了要挂载的文件系统类型。在这种情况下，它使用了用于VMware共享文件夹的FUSE实现。`</span><br><br># <span class="hljs-string">`.host:/：这是VMware环境中共享文件夹的位置。`</span><br><br># <span class="hljs-string">`/mnt/hgfs：这是挂载点，也就是本地系统上共享文件夹内容在挂载后可以访问的目录。`</span><br><br># <span class="hljs-string">`-o allow_other：此选项允许除了挂载它的用户之外的其他用户访问已挂载的文件系统。`</span><br></code></pre></td></tr></table></figure><p>源自：<a href="https://zhuanlan.zhihu.com/p/650638983">VMware共享文件夹</a></p><p>注意给这个文件夹写权限</p><p>重启需要重新挂载,所以可以<code>sudo vim/etc/fstab</code>在最后加一行<code>.host:/ /mnt/hgfs fuse.vmhgfs-fuse defaults,allow_other 0 0</code></p><!-- more -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>idea在archlinux下无法使用fctitx5</title>
    <link href="/2023/03/10/Spring%20%E7%9A%84%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90_Spring%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2023/03/10/Spring%20%E7%9A%84%E7%BB%93%E6%9E%84%E7%BB%84%E6%88%90_Spring%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="容器的基本实现-Spring-源码阅读"><a href="#容器的基本实现-Spring-源码阅读" class="headerlink" title="容器的基本实现_Spring 源码阅读"></a>容器的基本实现_Spring 源码阅读</h1><h2 id="第一行代码-资源加载相关"><a href="#第一行代码-资源加载相关" class="headerlink" title="第一行代码_资源加载相关"></a>第一行代码_资源加载相关</h2><p>从此行读源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>))<br></code></pre></td></tr></table></figure><p>ps: XmlBeanFactory 已经被弃用， 但思路一样，重点是loadBeanDifinitions。</p><p>替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="一-返回-ClassPathResource"><a href="#一-返回-ClassPathResource" class="headerlink" title="一 . 返回 ClassPathResource"></a>一 . 返回 ClassPathResource</h2><h3 id="Resource-概览"><a href="#Resource-概览" class="headerlink" title="Resource 概览"></a>Resource 概览</h3><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master/YzUmI.png" alt="YzUmI.png" style="zoom: 30%;" />  <p>相关实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-meta">@see</span> WritableResource<br>* <span class="hljs-meta">@see</span> ContextResource<br>* <span class="hljs-meta">@see</span> UrlResource<br>* <span class="hljs-meta">@see</span> FileUrlResource<br>* <span class="hljs-meta">@see</span> FileSystemResource<br>* <span class="hljs-meta">@see</span> ClassPathResource<br>* <span class="hljs-meta">@see</span> ByteArrayResource<br>* <span class="hljs-meta">@see</span> InputStreamResource<br></code></pre></td></tr></table></figure><p>为什么需要抽象 Resource，不用 Url ？</p><ol><li>Url 注册 handle 读取资源，但是没有 ClassPath 等资源的 handle，虽然可以自己注册 handle，但是不利于使用者代码编写（需要熟悉 Url 实现机制）。</li><li>没有相关方法</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="1-ClassPathResource"><a href="#1-ClassPathResource" class="headerlink" title="1.ClassPathResource"></a>1.ClassPathResource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathResource</span><span class="hljs-params">(String path)</span> &#123;<br><span class="hljs-built_in">this</span>(path, (ClassLoader) <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassPathResource</span><span class="hljs-params">(String path, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>   Assert.notNull(path, <span class="hljs-string">&quot;Path must not be null&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">pathToUse</span> <span class="hljs-operator">=</span> StringUtils.cleanPath(path); <span class="hljs-comment">// 详见2</span><br>   <span class="hljs-keyword">if</span> (pathToUse.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      pathToUse = pathToUse.substring(<span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-built_in">this</span>.path = pathToUse;<br>   <span class="hljs-built_in">this</span>.absolutePath = pathToUse;<br>   <span class="hljs-built_in">this</span>.classLoader = (classLoader != <span class="hljs-literal">null</span> ? classLoader : ClassUtils.getDefaultClassLoader());<br>   <span class="hljs-built_in">this</span>.clazz = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-cleanPath"><a href="#2-cleanPath" class="headerlink" title="2.cleanPath"></a>2.cleanPath</h4><p>主要的目的是消除冗余的路径信息，获得绝对路径。</p><p>总结：</p><ol><li>将Windows路径中的反斜杠<code>\</code>替换为正斜杠<code>/</code>。</li><li>处理路径中的重复斜杠，将它们替换为单个斜杠。</li><li>处理路径中的<code>&quot;.&quot;</code>，将它们去掉。</li><li>处理路径中的<code>&quot;..&quot;</code>，将它们和它前面的路径部分都去掉。</li></ol><p>例如：</p><ul><li><code>/foo/bar/../baz</code> 会被规范化为 <code>/foo/baz</code></li><li><code>/foo/./bar/baz</code> 会被规范化为 <code>/foo/bar/baz</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">cleanPath</span><span class="hljs-params">(String path)</span> &#123;<br>    <br>   <span class="hljs-keyword">if</span> (!hasLength(path)) &#123;<span class="hljs-comment">//判空 详见3</span><br>      <span class="hljs-keyword">return</span> path;<br>   &#125;<br>  <span class="hljs-comment">// 将路径中的&quot;\\&quot; (即WINDOWS_FOLDER_SEPARATOR) 换为 &quot;/&quot; (即FOLDER_SEPARATOR), 例如&quot;C:\\ClassPathResourceTests.java&quot;   详见4</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">normalizedPath</span> <span class="hljs-operator">=</span> replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">pathToUse</span> <span class="hljs-operator">=</span> normalizedPath;<br><br>   <span class="hljs-comment">// Shortcut if there is no work to do</span><br>   <span class="hljs-keyword">if</span> (pathToUse.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> pathToUse;<br>   &#125;<br><br>   <span class="hljs-comment">// Strip prefix from path to analyze, to not treat it as part of the</span><br>   <span class="hljs-comment">// first path element. This is necessary to correctly parse paths like</span><br>   <span class="hljs-comment">// &quot;file:core/../core/io/Resource.class&quot;, where the &quot;..&quot; should just</span><br>   <span class="hljs-comment">// strip the first &quot;core&quot; directory while keeping the &quot;file:&quot; prefix.</span><br>    <span class="hljs-comment">//字符串分为前缀和内容</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">prefixIndex</span> <span class="hljs-operator">=</span> pathToUse.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">if</span> (prefixIndex != -<span class="hljs-number">1</span>) &#123;<br>      prefix = pathToUse.substring(<span class="hljs-number">0</span>, prefixIndex + <span class="hljs-number">1</span>);<br>       <span class="hljs-comment">//这是因为在后面的处理过程中，如果前缀不为空，会在处理过程中加上一个路径分隔符 FOLDER_SEPARATOR，从而使得最终结果的前缀和传入的前缀不一致。因此需要在处理之前将前缀置空，以避免这个问题。</span><br>      <span class="hljs-keyword">if</span> (prefix.contains(FOLDER_SEPARATOR)) &#123;<br>         prefix = <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>         pathToUse = pathToUse.substring(prefixIndex + <span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (pathToUse.startsWith(FOLDER_SEPARATOR)) &#123;<br>      prefix = prefix + FOLDER_SEPARATOR;<br>      pathToUse = pathToUse.substring(<span class="hljs-number">1</span>);<br>   &#125;<br> <span class="hljs-comment">//一个字符串转数组的工具方法, 详细 待续，此处以 &quot;/&quot; 为分隔符</span><br>   String[] pathArray = delimitedListToStringArray(pathToUse, FOLDER_SEPARATOR);<br>   <span class="hljs-comment">// we never require more elements than pathArray and in the common case the same number</span><br>   Deque&lt;String&gt; pathElements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;(pathArray.length);<br>    <span class="hljs-comment">// &quot;..&quot; 的数量</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">tops</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pathArray.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> pathArray[i];<br>       <span class="hljs-comment">// CURRENT_PATH == &quot;.&quot;</span><br>      <span class="hljs-keyword">if</span> (CURRENT_PATH.equals(element)) &#123;<br>         <span class="hljs-comment">// Points to current directory - drop it.</span><br>      &#125;<br>       <span class="hljs-comment">//&quot;..&quot; == TOP_PATH</span><br>       <span class="hljs-comment">//..表示返回上一级路径</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TOP_PATH.equals(element)) &#123;<br>         <span class="hljs-comment">// Registering top path found.</span><br>         tops++;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">if</span> (tops &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Merging path element with element corresponding to top path.</span><br>            tops--;<br>         &#125;<br>         <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Normal path element found.</span><br>            pathElements.addFirst(element);<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// All path elements stayed the same - shortcut</span><br>   <span class="hljs-keyword">if</span> (pathArray.length == pathElements.size()) &#123;<br>      <span class="hljs-keyword">return</span> normalizedPath;<br>   &#125;<br>   <span class="hljs-comment">// Remaining top paths need to be retained.</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tops; i++) &#123;<br>      pathElements.addFirst(TOP_PATH);<br>   &#125;<br>   <span class="hljs-comment">// If nothing else left, at least explicitly point to current path.</span><br>    <br>    <span class="hljs-comment">// 判断是否是根路径</span><br>   <span class="hljs-keyword">if</span> (pathElements.size() == <span class="hljs-number">1</span> &amp;&amp; pathElements.getLast().isEmpty() &amp;&amp; !prefix.endsWith(FOLDER_SEPARATOR)) &#123;<br>      pathElements.addFirst(CURRENT_PATH);<br>   &#125;<br><span class="hljs-comment">//用 &quot;/&quot; 连接pathElements元素</span><br>   <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">joined</span> <span class="hljs-operator">=</span> collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);<br>   <span class="hljs-comment">// avoid string concatenation with empty prefix</span><br>   <span class="hljs-keyword">return</span> prefix.isEmpty() ? joined : prefix + joined;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-hasLength"><a href="#3-hasLength" class="headerlink" title="3.hasLength"></a>3.hasLength</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasLength</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String str)</span> &#123;<br><span class="hljs-keyword">return</span> (str != <span class="hljs-literal">null</span> &amp;&amp; !str.isEmpty());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用 newPatten 替换 inString 中所有 oldPattern</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">replace</span><span class="hljs-params">(String inString, String oldPattern, <span class="hljs-meta">@Nullable</span> String newPattern)</span> &#123;<br>   <span class="hljs-keyword">if</span> (!hasLength(inString) || !hasLength(oldPattern) || newPattern == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> inString;<br>   &#125;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> inString.indexOf(oldPattern);<br>   <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// no occurrence -&gt; can return input as-is</span><br>      <span class="hljs-keyword">return</span> inString;<br>   &#125;<br><span class="hljs-comment">// 扩大了就提前预留空间</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> inString.length();<br>   <span class="hljs-keyword">if</span> (newPattern.length() &gt; oldPattern.length()) &#123;<br>      capacity += <span class="hljs-number">16</span>;<br>   &#125;<br>   <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(capacity);<br><br>   <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// our position in the old string</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">patLen</span> <span class="hljs-operator">=</span> oldPattern.length();<br>   <span class="hljs-keyword">while</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>      sb.append(inString, pos, index);<br>      sb.append(newPattern);<br>      pos = index + patLen;<br>      index = inString.indexOf(oldPattern, pos);<br>   &#125;<br><br>   <span class="hljs-comment">// append any characters to the right of a match</span><br>   sb.append(inString, pos, inString.length());<br>   <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-返回-XmlBeanFactory"><a href="#二-返回-XmlBeanFactory" class="headerlink" title="二. 返回 XmlBeanFactory"></a>二. 返回 XmlBeanFactory</h2><p>ps: 此类已经被弃用</p><p>此过程重点注意 loadBeandefinitions 方法即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Spring 源码深度解析</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环境搭建_Spring 源码阅读</title>
    <link href="/2023/03/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Spring-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2023/03/07/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Spring-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="环境搭建-Spring-源码阅读"><a href="#环境搭建-Spring-源码阅读" class="headerlink" title="环境搭建_Spring 源码阅读"></a>环境搭建_Spring 源码阅读</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><a href="https://github.com/spring-projects/spring-framework/wiki/Build-from-Source">Build from Source · spring-projects&#x2F;spring-framework Wiki (github.com)</a></p><p><strong>注意JDK 需要17</strong></p><p>Gradle编译：无效的源发行版: 17<br><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//2.png"></p><h2 id="第一步-pull"><a href="#第一步-pull" class="headerlink" title="第一步 pull"></a>第一步 pull</h2><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YWrel.png" alt="1"></p><p>左上角切到5.0.x，然后 git pull</p><p><a href="https://imgtg.com/image/YWAGg"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YWAGg.png" alt="YWAGg.png"></a></p><p>gradle 会自动下载。</p><h2 id="objenesis-的编译解决"><a href="#objenesis-的编译解决" class="headerlink" title="objenesis 的编译解决"></a>objenesis 的编译解决</h2><p><a href="https://imgtg.com/image/YxjiX"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YxjiX.png" alt="YxjiX.png"></a></p><p><a href="https://blog.csdn.net/feng_23479046/article/details/100186099">解决spring源码构建时缺失spring-cglib-repack和spring-objenesis-repack问题_南笙北默的博客-CSDN博客</a></p><h2 id="aspect-编译解决"><a href="#aspect-编译解决" class="headerlink" title="aspect 编译解决"></a>aspect 编译解决</h2><p><a href="https://imgtg.com/image/Yx66x"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//Yx66x.png" alt="Yx66x.png"></a></p><p><a href="https://imgtg.com/image/YxIYU"><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//YxIYU.png" alt="YxIYU.png"></a></p><p>使用这个插件–AspectJ</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/qq_35443962/article/details/121687219">Gradle编译：无效的源发行版: 17-已解决_帅有何用的博客-CSDN博客</a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>Spring 源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>explain 参数详解</title>
    <link href="/2023/02/27/explain-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/02/27/explain-%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>explain 参数详解</p><!-- more --><blockquote><p>ps：在MySQL中，SELECT语句的执行顺序如下：<br>FROM：指定数据源<br>JOIN：对数据源进行JOIN操作<br>WHERE：对JOIN后的数据进行筛选<br>GROUP BY：按照某个字段进行分组<br>HAVING：对分组后的数据进行筛选<br>SELECT：选择需要的列<br>DISTINCT：去重<br>ORDER BY：排序<br>LIMIT：限制返回的记录数</p></blockquote><h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a><strong>示例图</strong></h3><hr><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img/59377c83825b70ff646429055d973c42.png" alt="img"></p><h3 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h3><hr><p>查询编号，表示查询中执行 SELECT 的序列号。对于简单的 SELECT 查询，这个值为 1，对于复杂查询，这个值会逐个递增。</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h3><hr><p>SELECT 查询的类型，包括以下几种：</p><ul><li><p>SIMPLE：简单的 SELECT 查询，不包含子查询或者 UNION。</p></li><li><p>PRIMARY：最外层的 SELECT 查询。</p></li><li><p>DERIVED：派生表的 SELECT 语句。</p></li></ul><p>SELECT t1.idFROM table1 t1 JOIN(SELECT id FROM table2) t2 ON t1.id&#x3D; t2.id;</p><p>在这个查询中，子查询 (SELECT id FROM table2) 返回一个结果集，该结果集会被存储在内存中或者磁盘上，然后被命名为 t2，作为派生表使用。这个派生表 t2 会被作为参数传递给外层查询，用来完成 JOIN 操作。因此这个查询的 select_type 是 DERIVED。</p><ul><li>SUBQUERY</li></ul><p>例如，在以下查询中，子查询返回每个用户的平均评分，外部查询则通过 HAVING 子句过滤出评分高于平均值的用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> user_id,<span class="hljs-built_in">AVG</span>(rating)<span class="hljs-keyword">as</span> avg_rating<br><br><br><br><span class="hljs-keyword">FROM</span> ratings<br><br><br><br>GROUPBY user_id<br><br><br><br>HAVINGAVG(rating)<span class="hljs-operator">&gt;</span>(SELECTAVG(rating)<span class="hljs-keyword">FROM</span> ratings)<br></code></pre></td></tr></table></figure><p>在这种情况下，SELECT AVG(rating) FROM ratings 是一个子查询，它返回整个 ratings 表中所有评分的平均值。</p><ul><li>UNION：表示查询中使用了UNION操作，并且从创建的派生表中检索数据。例如，以下查询将从两个表中检索最高薪水的员工，并使用UNION操作将结果组合在一起：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> emp_id,<span class="hljs-built_in">MAX</span>(salary)<span class="hljs-keyword">FROM</span> employees GROUPBY emp_id<br><br><br><br><span class="hljs-keyword">UNION</span><br><br><br><br><span class="hljs-keyword">SELECT</span> emp_id,<span class="hljs-built_in">MAX</span>(salary)<span class="hljs-keyword">FROM</span> contractors GROUPBY emp_id;<br></code></pre></td></tr></table></figure><p>这个查询使用UNION将两个SELECT语句的结果组合在一起，并使用派生表来处理这些结果。</p><ul><li>DEPENDENT UNION：表示在UNION查询中，子查询依赖于外部查询的结果集，也称作依赖联合查询。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table1<br><br><br><br><span class="hljs-keyword">UNION</span><br><br><br><br><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table2 <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span>(SELECTCOUNT(<span class="hljs-operator">*</span>)<span class="hljs-keyword">FROM</span> table1)<br></code></pre></td></tr></table></figure><p>这个查询将table1和table2的数据合并，并返回id和name列的值。在第二个SELECT子查询中，查询的结果依赖于第一个SELECT子查询的结果。</p><ul><li>DEPENDENT SUBQUERY：表示一个依赖于外部查询的子查询。</li></ul><p>当一个子查询中的表引用了外部查询的表时，就会产生依赖关系，即该子查询需要等待外部查询执行完毕才能开始执行，因此在执行过程中会使用到外部查询中的值。</p><p>下面是一个示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> u.id, u.name<br><br><br><br><span class="hljs-keyword">FROM</span> users u <br><br><br><br><span class="hljs-keyword">WHERE</span>(SELECTAVG(amount)<span class="hljs-keyword">FROM</span> orders o <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.id)<span class="hljs-operator">&lt;</span>(<span class="hljs-keyword">SELECT</span> amount <span class="hljs-keyword">FROM</span> orders o <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.idORDERBY amount DESCLIMIT1)<br></code></pre></td></tr></table></figure><p>这里包含两个子查询，其中第一个子查询 (SELECT AVG(amount) FROM orders o WHERE o.user_id &#x3D; u.id) 用于计算该用户的平均订单金额，第二个子查询 (SELECT amount FROM orders o WHERE o.user_id &#x3D; u.id ORDER BY amount DESC LIMIT 1) 用于查询该用户的订单中金额最大的一笔订单的金额。这两个子查询都是与外部查询有关联的，因此被标记为 DEPENDENT SUBQUERY。</p><ul><li>UNCACHEABLE SUBQUERY：子查询不能被缓存，必须重新计算每个外部查询。</li></ul><p>举个例子，假设我们有一个用户表（user）和一个订单表（order），我们想查询每个用户的订单数量。我们可以使用以下查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br><br><br><br>  u.id,<br><br><br><br>  u.name,<br><br><br><br>  (<br><br><br><br>    SELECTCOUNT(<span class="hljs-operator">*</span>)<br><br><br><br>    FROMorder o <br><br><br><br>    <span class="hljs-keyword">WHERE</span> o.user_id<span class="hljs-operator">=</span> u.id<br><br><br><br>  )<span class="hljs-keyword">AS</span> order_count<br><br><br><br>FROMuser u;<br></code></pre></td></tr></table></figure><p>这个查询中，子查询中的 COUNT(*) 函数需要根据 user_id 来计算每个用户的订单数量，而 user_id 来自外层查询的表。因为这个关联条件是动态计算的，因此 MySQL 不能对子查询进行缓存，因此该子查询就被标记为 UNCACHEABLE SUBQUERY。</p><ul><li>UNCACHEABLE UNION：</li></ul><p>表示该查询的 UNION 子句不可缓存，需要在每次执行时重新计算。这通常是因为 UNION 的两个 SELECT 语句中包含的字段类型不同，或者两个查询中的 ORDER BY 子句不同，导致 MySQL 无法缓存结果集，需要重新计算。</p><ul><li>UNION RESULT：UNION 的结果。</li></ul><h3 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h3><hr><p>显示此行查询的是哪个表。</p><h3 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h3><hr><p>匹配的分区列表，使用了分区表才有此列。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><hr><p>访问类型，包括以下几种：</p><ul><li><p>ALL：Full Table Scan，表示全表扫描。</p></li><li><p>index：Full Index Scan，表示索引扫描。</p></li><li><p>range：表示索引范围扫描，常用于带有 between 和 in 的查询语句。</p></li><li><p>ref：表示使用非唯一索引或唯一索引的非唯一前缀查询，例如 where id &#x3D; 10。</p></li><li><p>eq_ref：表示使用唯一索引查询，例如 where id &#x3D; 10。</p></li><li><p>const、system：表示查询中只有一行或少数几行时使用的索引查询方式。</p></li></ul><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h3><hr><p>显示查询语句中可能使用到的索引。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h3><hr><p>实际使用的索引。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h3><hr><p>使用的索引长度。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h3><hr><p>显示索引的哪一列被使用了，常见的是一个常量或者一个索引列的名字。</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h3><hr><p>预计查询返回的行数。</p><h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h3><hr><p>该查询条件所过滤的数据行百分比。</p><h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a><strong>Extra</strong></h3><hr><p>包含对查询的补充信息，通常包括以下几种：</p><ul><li><p>Using index：表示该查询使用了覆盖索引，避免了回表查询，提高了查询效率。</p></li><li><p>Using where：表示该查询使用了WHERE条件语句。</p></li><li><p>Using temporary：表示MySQL需要使用临时表来处理查询，可能是由于GROUP BY和ORDER BY等操作导致的。</p></li><li><p>Using filesort：表示MySQL需要使用文件排序，可能是由于GROUP BY和ORDER BY等操作导致的。</p></li></ul><p>表示查询中涉及到的排序操作无法使用索引完成，需要对结果集进行文件排序（Filesort）。文件排序操作需要先将需要排序的列从表中读取到内存中，然后进行排序操作，最后返回结果。</p><ul><li><p>Using join buffer：表示MySQL需要使用连接缓存，加快查询效率。</p></li><li><p>Impossible where：表示WHERE条件无法满足，该查询不会返回任何数据。</p></li><li><p>Select tables optimized away：表示MySQL优化了查询，直接返回了结果，没有实际查询任何数据。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法索引</title>
    <link href="/2023/02/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/02/26/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<!-- more --><blockquote><p>学习相关算法时，使用的相关博文和模板的集合</p></blockquote><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p><a href="https://leetcode.cn/problems/my-calendar-ii/solutions/1681245/by-lfool-nodi/">线段树相关知识</a></p><p>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 线段树（动态开点）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: LFool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/6/7 09:15</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SegmentTreeDynamic</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        Node left, right;<br>        <span class="hljs-type">int</span> val, add;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) &#123;<br>            node.val += (end - start + <span class="hljs-number">1</span>) * val;<br>            node.add += val;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>        pushDown(node, mid - start + <span class="hljs-number">1</span>, end - mid);<br>        <span class="hljs-keyword">if</span> (l &lt;= mid) update(node.left, start, mid, l, r, val);<br>        <span class="hljs-keyword">if</span> (r &gt; mid) update(node.right, mid + <span class="hljs-number">1</span>, end, l, r, val);<br>        pushUp(node);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &lt;= start &amp;&amp; end &lt;= r) <span class="hljs-keyword">return</span> node.val;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>        pushDown(node, mid - start + <span class="hljs-number">1</span>, end - mid);<br>        <span class="hljs-keyword">if</span> (l &lt;= mid) ans += query(node.left, start, mid, l, r);<br>        <span class="hljs-keyword">if</span> (r &gt; mid) ans += query(node.right, mid + <span class="hljs-number">1</span>, end, l, r);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(Node node)</span> &#123;<br>        node.val = node.left.val + node.right.val;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushDown</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> leftNum, <span class="hljs-type">int</span> rightNum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span>) node.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        <span class="hljs-keyword">if</span> (node.right == <span class="hljs-literal">null</span>) node.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>        <span class="hljs-keyword">if</span> (node.add == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>        node.left.val += node.add * leftNum;<br>        node.right.val += node.add * rightNum;<br>        <span class="hljs-comment">// 对区间进行「加减」的更新操作，下推懒惰标记时需要累加起来，不能直接覆盖</span><br>        node.left.add += node.add;<br>        node.right.add += node.add;<br>        node.add = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildTree</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-comment">// 到达叶子节点</span><br>    <span class="hljs-keyword">if</span> (start == end) &#123;<br>        node.val = arr[start];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (start + end) &gt;&gt; <span class="hljs-number">1</span>;<br>    buildTree(node.left, start, mid);<br>    buildTree(node.right, mid + <span class="hljs-number">1</span>, end);<br>    <span class="hljs-comment">// 向上更新</span><br>    pushUp(node);<br>&#125;<br><span class="hljs-comment">// 向上更新</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(Node node)</span> &#123;<br>    node.val = node.left.val + node.right.val;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p><a href="https://www.cnblogs.com/gaopeng527/p/4887765.html#:~:text=%E5%AD%97%E5%85%B8%E6%A0%91%EF%BC%88Trie%EF%BC%89%E7%9A%84java%E5%AE%9E%E7%8E%B0%20.,%E4%B8%80%E3%80%81%E5%AE%9A%E4%B9%89.%20%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%88%E7%A7%B0%E5%8D%95%E8%AF%8D%E6%9F%A5%E6%89%BE%E6%A0%91%EF%BC%8CTrie%E6%A0%91%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E5%93%88%E5%B8%8C%E6%A0%91%E7%9A%84%E5%8F%98%E7%A7%8D%E3%80%82%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E6%98%AF%E7%94%A8%E4%BA%8E%E7%BB%9F%E8%AE%A1%EF%BC%8C%E6%8E%92%E5%BA%8F%E5%92%8C%E4%BF%9D%E5%AD%98%E5%A4%A7%E9%87%8F%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E4%BD%86%E4%B8%8D%E4%BB%85%E9%99%90%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E7%BB%8F%E5%B8%B8%E8%A2%AB%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BA%8E%E6%96%87%E6%9C%AC%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E3%80%82%E5%AE%83%E7%9A%84%E4%BC%98%E7%82%B9%E6%98%AF%EF%BC%9A%E5%88%A9%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80%E6%9D%A5%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%EF%BC%8C%E6%9C%80%E5%A4%A7%E9%99%90%E5%BA%A6%E5%9C%B0%E5%87%8F%E5%B0%91%20">字典树相关知识</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247489106&idx=1&sn=b7c1d4864f42e8a54f4b4754ff9ba8d7&chksm=fd9cbd4dcaeb345b5e39e799bdbeb2e89ed424c763e2af2a23fcb8eab228acc46d10f0395686&scene=178&cur_album_id=1817026489800802305#rd">题目</a><br>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>        <span class="hljs-keyword">private</span> TrieNode root;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>            root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>            root.wordEnd = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(word.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    node.childdren.put(c, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>());<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            node.wordEnd = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(word.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> found &amp;&amp; node.wordEnd;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>            <span class="hljs-type">TrieNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> root;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>                <span class="hljs-type">Character</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Character</span>(prefix.charAt(i));<br>                <span class="hljs-keyword">if</span> (!node.childdren.containsKey(c)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                node = node.childdren.get(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> found;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>        Map&lt;Character, TrieNode&gt; childdren;<br>        <span class="hljs-type">boolean</span> wordEnd;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrieNode</span><span class="hljs-params">()</span> &#123;<br>            childdren = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character, TrieNode&gt;();<br>            wordEnd = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h1><p><a href="https://blog.csdn.net/qq_37795916/article/details/123814643">基础</a><br><a href="https://leetcode.cn/problems/shortest-path-with-alternating-colors/">例题</a><br>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-type">int</span> next;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> w)</span>&#123;<br>    edges[cnt] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>();<span class="hljs-comment">//创建一条边将其放入边集数组</span><br>    edges[cnt].to = v;<br>    edges[cnt].w = w;<br>    edges[cnt].next = head[u];<br>    head[u] = cnt++;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="十大排序算法"><a href="#十大排序算法" class="headerlink" title="十大排序算法"></a>十大排序算法</h1><p><a href="https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-9">基础</a><br>题目<br><a href="https://leetcode.cn/problems/query-kth-smallest-trimmed-number/solution/by-tsreaper-hlt7/">基数排序的妙用</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线程池核心参数</title>
    <link href="/2023/02/25/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0/"/>
    <url>/2023/02/25/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h1><p>表示线程池中维护的核心线程数。核心线程是一直存在的线程，当线程池中的任务数量超过核心线程数时，任务会被加入任务队列中，等待核心线程来处理。</p><blockquote><p>这里需要注意的是：在刚刚创建ThreadPoolExecutor的时候，线程并不会立即启动，而是要等到有任务提交时才会启动，除非调用了prestartCoreThread&#x2F;prestartAllCoreThreads事先启动核心线程。再考虑到keepAliveTime和allowCoreThreadTimeOut超时参数的影响，所以没有任务需要执行的时候，线程池的大小不一定是corePoolSize。</p></blockquote><p>当线程池中的任务数量不断增加，超过了核心线程数和任务队列的容量时，线程池就会创建新的线程来处理任务，直到达到 <code>maximumPoolSize</code> 的限制。如果线程池中的线程数量大于核心线程数，但小于最大线程数，当空闲线程的空闲时间超过了 <code>keepAliveTime</code> 参数设定的时间时，这些线程会被终止并从线程池中移除。</p><h1 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h1><p>表示线程池中最多能创建的线程数量。当线程池中的线程数达到这个数量后，线程池将不再创建新的线程。</p><h1 id="WorkQueue"><a href="#WorkQueue" class="headerlink" title="WorkQueue"></a>WorkQueue</h1><p>表示线程池中的任务队列。任务队列用于存放尚未被执行的任务，待核心线程空闲时会从任务队列中取出任务进行处理。</p><p>线程池的任务队列可以分为两种类型：</p><ul><li><p>有界队列。有界队列的大小是固定的，当队列已满时，新的任务将被拒绝。</p></li><li><p>无界队列。无界队列的大小没有限制，可以存放任意数量的任务。</p></li></ul><p>常见的任务队列类型有以下几种：</p><ol><li><p><code>ArrayBlockingQueue</code>：一个由数组结构组成的有界阻塞队列。</p></li><li><p><code>LinkedBlockingQueue</code>：一个由链表结构组成的有界阻塞队列。</p></li><li><p><code>SynchronousQueue</code>：一个不存储元素的阻塞队列，每个插入操作必须等待一个相应的删除操作，否则插入操作将一直处于阻塞状态。</p></li></ol><p>根据实际情况，选择不同的任务队列类型可以实现更高效的任务处理。如果任务数量较少，可以选择无界队列；如果任务数量较多，可以选择有界队列，避免内存溢出。同时，需要根据任务的特性和系统资源的限制来调整任务队列的大小和类型。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于redo log 刷盘时机</title>
    <link href="/2023/01/21/%E5%85%B3%E4%BA%8Eredo-log-%E5%88%B7%E7%9B%98%E6%97%B6%E6%9C%BA/"/>
    <url>/2023/01/21/%E5%85%B3%E4%BA%8Eredo-log-%E5%88%B7%E7%9B%98%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<!-- more --><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a><strong>概要</strong></h3><hr><p><strong>索引是一种用于快速查询和检索数据的数据结构</strong>。</p><p>在MySQL中使用较多的索引有 Hash 索引、B+树索引等。而我们经常使用的 InnoDB 存储引擎的默认索引实现为 B+ 树索引。</p><h3 id="为什么不用-Hash-索引？"><a href="#为什么不用-Hash-索引？" class="headerlink" title="为什么不用 Hash 索引？"></a><strong>为什么不用 Hash 索引？</strong></h3><hr><p>Hash 索引通过计算 key 寻找 value ，查询单值为 O(1) ，但是当需要遍历的时候， 即需要范围查询时， 也需要计算一个个计算，开销太大。</p><h3 id="InnoDB的索引策略"><a href="#InnoDB的索引策略" class="headerlink" title="InnoDB的索引策略"></a><strong>InnoDB的索引策略</strong></h3><hr><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a><strong>聚簇索引</strong></h4><p>聚簇索引： 使用主键值进行记录和页的排序，B+ 树的叶子节点存储一条完整记录内容。</p><p>InnoDB 通过聚簇索引存储数据。</p><p>InnoDB 的页分为目录项与普通记录，以 B+ 树的形式组织。而目录项仅记录主键值和页编号。</p><h4 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a><strong>二级索引</strong></h4><p>二级索引：根据索引列建立的 B+ 树。</p><p>二级索引目录项除了索引列值，页号外，也需要存储主键值。如此才能在索引列值相等的时候，正确的分配页的位置，而叶子节点为了节约空间仅存储主键值和索引列的值，如果需要获取全部数据，需要进行回表操作（根据主键值再次查询聚簇索引）。</p><h4 id="唯一二级索引"><a href="#唯一二级索引" class="headerlink" title="唯一二级索引"></a><strong>唯一二级索引</strong></h4><p>当索引是 unique 时， 二级索引称为唯一二级索引。</p><p>当对于唯一二级索引来说，在 unique 列可以存储多个 NULL 值，所以其目录项也需要存储主键值。</p><h3 id="建立索引的原则"><a href="#建立索引的原则" class="headerlink" title="建立索引的原则"></a><strong>建立索引的原则</strong></h3><hr><ol><li>只为用于搜索、排序、分组的列创建索引</li><li>重复数占比小的时候建立索引</li><li>索引列的类型尽量小</li><li>可以建立前缀索引，节约空间</li><li>尽量覆盖索引，节约回表开销</li><li>为了避免聚簇索引产生页面分裂的情况，<strong>建议使主键拥有自增属性</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中心扩散法</title>
    <link href="/2022/11/07/%E4%B8%AD%E5%BF%83%E6%89%A9%E6%95%A3%E6%B3%95/"/>
    <url>/2022/11/07/%E4%B8%AD%E5%BF%83%E6%89%A9%E6%95%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>中心扩散法求最长回文子串</p><!-- more --><p>中心扩散法求字符串 s 中的<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E6%96%87%E4%B8%B2&spm=1001.2101.3001.7020">回文串</a>的最长子串时：</p><p>求当前字符串下标 i 的最长回文串思路步骤：</p><p>1. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">while</span> (--left &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == s.charAt(left)) &#123;<span class="hljs-comment">// 计算 i 前与 i 处相等的字符个数</span><br>    逻辑代码;<br>&#125;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>2. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">rigth</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">while</span> (++right &lt; s.length() - <span class="hljs-number">1</span> &amp;&amp; s.charAt(i) == s.charAt(right))&#123;<span class="hljs-comment">// 计算 i 后与 i 处相等的字符个数</span><br>    逻辑代码;<br>&#125;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>3. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (--left &gt; <span class="hljs-number">0</span> &amp;&amp; ++right &lt; s.length() - <span class="hljs-number">1</span> &amp;&amp; s.charAt(left) == s.charAt(right))&#123; <span class="hljs-comment">// 比较左右字符相等数目</span><br>逻辑代码;<br>&#125;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>重复计算过多，可采取 dp 。 (虽然但是， dp写多了， 反而是想不到前面的中心扩散， 但弄完后， 前面的难度明显比 dp 难度低， 总而言之我是**)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i, right = i;<br>     <span class="hljs-keyword">while</span> (s.charAt(left) == s.charAt(right) &amp;&amp; (right - left &lt; <span class="hljs-number">3</span> || dp[left + <span class="hljs-number">1</span>][right - <span class="hljs-number">1</span>])) &#123; <br>         <span class="hljs-comment">// dp[left][right] 表示 left 到 right 之间是回文串</span><br>     dp[left][right] = <span class="hljs-literal">true</span>;<br>     &#125;<br>&#125;<br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>例题：</p><ol><li>最长回文子串</li></ol><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2&spm=1001.2101.3001.7020">回文子串</a>。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cbbd&quot;</span><br>输出：<span class="hljs-string">&quot;bb&quot;</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>题目来源：<a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串 - 力扣（Leetcode）</a></p><p>参考题解：<a href="https://leetcode.cn/problems/longest-palindromic-substring/solutions/63641/zhong-xin-kuo-san-fa-he-dong-tai-gui-hua-by-reedfa/">5. 最长回文子串 - 力扣（Leetcode）</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>char与varchar占用_MySQL笔记</title>
    <link href="/2022/11/06/char%E4%B8%8Evarchar%E5%8D%A0%E7%94%A8-MySQL%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/06/char%E4%B8%8Evarchar%E5%8D%A0%E7%94%A8-MySQL%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="char与varchar占用"><a href="#char与varchar占用" class="headerlink" title="char与varchar占用"></a>char与varchar占用</h2><p>广义上，char(m) 占用那个字节，varchar(m) 最多占用 m 个字节，由占用字节和记录长度的字节组成。</p><blockquote><p>ps：以下皆在使用 InnoDB 时，在 COMPACT 格式下的情况</p></blockquote><h3 id="varchar-m-与-varchar-2m-的区别"><a href="#varchar-m-与-varchar-2m-的区别" class="headerlink" title="varchar(m) 与 varchar(2m)的区别"></a>varchar(m) 与 varchar(2m)的区别</h3><h4 id="InnoDB行格式类型（Compact格式）"><a href="#InnoDB行格式类型（Compact格式）" class="headerlink" title="InnoDB行格式类型（Compact格式）"></a>InnoDB行格式类型（Compact格式）</h4><p>Compact行格式示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/lanfunoe/img@master//20200806232022339.png" alt="img"></p><blockquote><p>图片来自<a href="https://blog.csdn.net/liuming690452074/article/details/113820877">Mysql compact行格式_千百元的博客-CSDN博客_compact行格式</a></p></blockquote><h4 id="varchar-占用构成"><a href="#varchar-占用构成" class="headerlink" title="varchar 占用构成"></a>varchar 占用构成</h4><p>varchar是变长字段，由真正的数据内容和该数据占用的字节数组成。</p><p>而数据占用的字节数存储在变长字段列表如(下图)， ps：这个长度在变长字段列表逆序存放。</p><h5 id="varchar-m-长度在变长字段列表的占用"><a href="#varchar-m-长度在变长字段列表的占用" class="headerlink" title="varchar(m) 长度在变长字段列表的占用"></a>varchar(m) 长度在变长字段列表的占用</h5><p>varchar(m) 允许占用 m * n （n 取决于编码字符集使用多少个字节表示一个字符)， 当其实际占用 i 个字节时</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. m * n &lt;= <span class="hljs-number">255</span> 其在变长字段列表占用<span class="hljs-number">1</span>个字节<br><span class="hljs-attribute">2</span>. m * n &gt; <span class="hljs-number">255</span> &amp;&amp; i &lt;= <span class="hljs-number">127</span>， 其在变长字段列表占用<span class="hljs-number">1</span>个字节<br><span class="hljs-attribute">3</span>. m * n &gt; <span class="hljs-number">255</span> &amp;&amp; i &gt; <span class="hljs-number">127</span>， 其在变长字段列表占用<span class="hljs-number">2</span>个字节<br><span class="hljs-attribute">123</span><br></code></pre></td></tr></table></figure><h3 id="char-m-一定是占用-m-个字节吗？"><a href="#char-m-一定是占用-m-个字节吗？" class="headerlink" title="char(m) 一定是占用 m 个字节吗？"></a>char(m) 一定是占用 m 个字节吗？</h3><p> 仅当使用定长编码字符集（如 ascii ）的时候，才是固定占用m个字节。</p><p> 当使用变长编码字符集的时候，会像 varchar 一样在变长字段长度列表中存储占用的字节长度。例如：当使用 utf8 字符集的时候，varchar(m) 占用字节长度在m3m。（utf8表示一个字符占用13个字节）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
